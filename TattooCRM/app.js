/* app.js ‚Äî SPA controller (Firestore + Google Drive) */

const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
const toast = (msg) => {
  const t = $('#toast');
  t.textContent = msg;
  t.classList.add('show');
  setTimeout(() => t.classList.remove('show'), 1800);
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ <dialog id="confirmDialog">
function confirmDlg(message = '–í—ã —É–≤–µ—Ä–µ–Ω—ã?') {
  return new Promise(resolve => {
    const dlg = $('#confirmDialog');
    if (!dlg) return resolve(confirm(message)); // fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π confirm
    $('#confirmText').textContent = message;

    const yes = $('#confirmYes');
    const no  = $('#confirmNo');

    const onYes = () => { cleanup(); dlg.close(); resolve(true); };
    const onNo  = () => { cleanup(); dlg.close(); resolve(false); };

    function cleanup(){
      yes.removeEventListener('click', onYes);
      no.removeEventListener('click', onNo);
    }

    yes.addEventListener('click', onYes);
    no.addEventListener('click', onNo);

    dlg.showModal();
  });
}

const OPEN_CLIENT_ON_TILE_CLICK = false;

// --- Boot overlay utils ---
const BOOT = {
  steps: [
    'DOM –≥–æ—Ç–æ–≤',
    'Firebase SDK',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏',
    'Google Identity (GIS)',
    'Google API (gapi)',
    'Drive –≥–æ—Ç–æ–≤',
    'Firestore (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)',
    'UI –≥–æ—Ç–æ–≤–∞'
  ],
  el: null, list: null, hint: null, progressEl: null,
  state: [],
  show(){
    this.el = this.el || document.getElementById('bootOverlay');
    this.list = this.list || document.getElementById('bootSteps');
    this.hint = this.hint || document.getElementById('bootHint');
    this.progressEl = this.progressEl || document.getElementById('bootProgress');
    if (!this.el || !this.list) return; // –µ—Å–ª–∏ –æ–≤–µ—Ä–ª–µ—è –Ω–µ—Ç –≤ HTML ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
    this.list.innerHTML = '';
    this.state = this.steps.map(_ => 'wait');
    this.steps.forEach((t,i)=>{
      const li = document.createElement('div');
      li.className = 'boot-step wait';
      li.dataset.idx = String(i);
      li.innerHTML = `<span class="mark">‚Ä¶</span><span>${t}</span>`;
      this.list.appendChild(li);
    });
    this.el.classList.remove('hidden');
    this.updateProgress();
  },
  set(i, status, note=''){
    if (!this.list) return;
    const row = this.list.querySelector(`.boot-step[data-idx="${i}"]`);
    if(!row) return;
    row.classList.remove('wait','ok','err');
    row.classList.add(status);
    row.querySelector('.mark').textContent = status==='ok' ? '‚úì' : (status==='err' ? '!' : '‚Ä¶');
    this.state[i] = status;
    if(note && this.hint) this.hint.textContent = note;
    this.updateProgress();
  },
  hide(){ this.el?.classList.add('hidden'); },
  updateProgress(){
    const ok = this.state.filter(s=>s==='ok').length;
    const pct = Math.round(ok / this.steps.length * 100);
    if (this.progressEl) this.progressEl.textContent = `${pct}%`;
  }
};

// ¬´–æ–∂–∏–¥–∞–ª–∫–∞¬ª –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª–æ–≤/—Å–æ—Å—Ç–æ—è–Ω–∏—è
async function waitFor(getter, timeout=10000, step=50){
  const t0 = Date.now();
  while(!getter()){
    if(Date.now()-t0 > timeout) throw new Error('timeout: ' + getter.toString());
    await new Promise(r => setTimeout(r, step));
  }
}

// --- Fast Auth Persistence (—É—Å–∫–æ—Ä—è–µ–º —Å—Ç–∞—Ä—Ç –Ω–∞ iOS/Safari/Private) ---
async function testIndexedDB(timeout = 800) {
  return new Promise((resolve) => {
    try {
      let done = false;
      const req = indexedDB.open('tattoocrm_idb_probe', 1);
      const timer = setTimeout(() => { if (!done) { done = true; resolve(false); } }, timeout);
      req.onerror = req.onblocked = () => { if (!done) { done = true; clearTimeout(timer); resolve(false); } };
      req.onsuccess = () => {
        if (!done) {
          done = true; clearTimeout(timer);
          try { req.result.close(); indexedDB.deleteDatabase('tattoocrm_idb_probe'); } catch(_){}
          resolve(true);
        }
      };
      req.onupgradeneeded = () => {};
    } catch (e) {
      resolve(false);
    }
  });
}

async function ensureAuthPersistence() {
  // –ï—Å–ª–∏ IndexedDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/—Ç–æ—Ä–º–æ–∑–∏—Ç (—á–∞—Å—Ç–æ –Ω–∞ iOS/Safari) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º SESSION
  const idbOk = await testIndexedDB(800);
  const isAppleTouch =
    /iPad|iPhone|iPod/.test(navigator.userAgent) ||
    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);

  const useSession = isAppleTouch && !idbOk;
  const mode = useSession ? firebase.auth.Auth.Persistence.SESSION
                          : firebase.auth.Auth.Persistence.LOCAL;

  await FB.auth.setPersistence(mode);
  try {
    BOOT.set(1, 'ok', useSession ? 'Auth: SESSION (iOS/IDB slow)' : 'Auth: LOCAL');
  } catch(_) {}
}

// --- Env flags (Safari / A2HS) ---
const isIOS = /iPhone|iPad|iPod/.test(navigator.userAgent);
const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
const isStandalone = !!(window.navigator && window.navigator.standalone);
const isSafariA2HS = isIOS && isSafari && isStandalone;

// –û–±—ë—Ä—Ç–∫–∞-—Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–µ—â–∞–Ω–∏–π
function withTimeout(promise, ms = 3000, label = 'timeout') {
  return new Promise((resolve, reject) => {
    const t = setTimeout(() => reject(new Error(label)), ms);
    promise.then(v => { clearTimeout(t); resolve(v); },
                 e => { clearTimeout(t); reject(e); });
  });
}


// ---------- State ----------
const AppState = {
  connected: false,
  settings: null,
  clients: [],
  reminders: [],
  appointments: [],
  supplies: [],
  marketing: [],            // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  autoSyncTimer: null
};
let syncInProgress = false;
let currentUser = null;
let driveReady = false;

// ---------- Init ----------
// ---------- Init ----------
// ---------- Init ----------
window.addEventListener('DOMContentLoaded', async () => {
  // boot: DOM
  try { BOOT.show(); BOOT.set(0,'ok'); } catch(_) {}

  bindTabbar();  bindHeader();
  bindOnboarding();
  bindClientsModal();
  bindSettings();
bindSupplies();

// boot: Firebase SDK –≤–∏–¥–µ–Ω
try { if (window.firebase && window.FB) BOOT.set(1,'ok'); } catch(_) {}

// –£—Å–∫–æ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Auth –Ω–∞ iOS/Safari ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ü–∏—é
await ensureAuthPersistence();

// --- QuickStart: –µ—Å–ª–∏ –¥–µ–≤–∞–π—Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –µ—Å—Ç—å –∫—ç—à —Ç–æ–∫–µ–Ω–∞ Drive ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º UI —Å—Ä–∞–∑—É
try {
  const trusted = isDeviceTrusted();
  const cachedTok = getSavedAccessToken();
  if (trusted && cachedTok) {
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°–µ–≥–æ–¥–Ω—è¬ª (—Å –¥–µ–º–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö)
    if (!AppState.settings) AppState.settings = demoSettings();
    showPage('todayPage');
    renderToday();
    try { BOOT.set(6,'ok','–ö—ç—à'); BOOT.set(7,'ok'); BOOT.hide(); } catch(_) {}
    toast('–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç ¬∑ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–æ–Ω–µ');

    // –ü–æ–¥—Ü–µ–ø–∏–º gapi –∏ –ø–æ–¥–ª–æ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã Drive –±—ã–ª –≥–æ—Ç–æ–≤
    (async () => {
  try {
    // –∂–¥—ë–º –Ω–µ —Ç–æ–ª—å–∫–æ gapi, –Ω–æ –∏ gapi.client
    await waitFor(() => window.gapi && gapi.client);

    // —Ç–æ–∫–µ–Ω –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (gapi?.client?.setToken) {
      gapi.client.setToken({ access_token: cachedTok });
    }

    const __ds = document.querySelector('#driveStatus');
    if (__ds) __ds.textContent = 'Drive: –æ–Ω–ª–∞–π–Ω';

    // –¥–∞–ª—å—à–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drive (–æ–Ω–∞ —Å–∞–º–∞ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç driveReady)
    initDriveStack({ forceConsent: false }).catch(console.warn);
  } catch (e) {
    console.warn('quickStart drive', e);
    const __ds = document.querySelector('#driveStatus');
    if (__ds) __ds.textContent = 'Drive: –æ—Ñ—Ñ–ª–∞–π–Ω';
  }
})();
  }
} catch(e){ console.warn('quickStart', e); }



// –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ —Å—Ä–∞–∑—É ‚Äî –∂–¥—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
// –ù–µ –∂–¥—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ: –µ—Å–ª–∏ –∑–∞ 3—Å –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç—è, UI –Ω–µ –≤–∏—Å–∏—Ç
let __authResolved = false;
const __authTimeout = setTimeout(() => {
  if (!__authResolved) {
    try { BOOT.set(2, 'ok', '–ì–æ—Å—Ç—å (—Ç–∞–π–º–∞—É—Ç 3—Å)'); BOOT.hide(); } catch(_) {}
    showPage('onboarding');
  }
}, 3000);

FB.auth.onAuthStateChanged(async (user) => {
  clearTimeout(__authTimeout);
  __authResolved = true;

  // boot: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
  try { BOOT.set(2,'ok', user ? '–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è' : '–ì–æ—Å—Ç—å (–Ω–µ—Ç —Å–µ—Å—Å–∏–∏)'); } catch(_) {}

 if (user) {
  currentUser = user;
  setDeviceTrusted(user);
  touchDeviceTrust();
  try {
     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drive
if (!isSafariA2HS) {
  // –°—Ç–∞—Ä—Ç—É–µ–º –≤ —Ñ–æ–Ω–µ ‚Äî UI –Ω–µ –∂–¥—ë—Ç
  const driveInit = initDriveStack({ forceConsent: false })
    .catch(e => {
      console.warn('Drive init (bg) failed', e);
      try { BOOT.set(5,'err','Drive –æ—Ç–ª–æ–∂–µ–Ω'); } catch(_) {}
    });
} else {
  // –í Safari A2HS –≤–æ–æ–±—â–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º Drive –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
  try { BOOT.set(5,'err','Drive –æ—Ç–ª–æ–∂–µ–Ω (Safari A2HS)'); } catch(_) {}
}

await loadSettings();
fillSettingsForm();
AppState.connected = true;

      showPage('todayPage');
      listenClientsRealtime();
      listenRemindersRealtime();
listenSuppliesRealtime();
      renderToday();


listenMarketingRealtime();
      toast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ üëã');
    } catch (e) {
      console.warn('restore session failed', e);
      showPage('onboarding');
      try { BOOT.hide(); } catch(_) {}
    }
  } else {
    showPage('onboarding');
    try { BOOT.hide(); } catch(_) {}
  }
}); // ‚Üê –∑–∞–∫—Ä—ã–ª–∏ onAuthStateChanged
}); // ‚Üê –∑–∞–∫—Ä—ã–ª–∏ DOMContentLoaded
// ---------- Tabs ----------
function bindTabbar(){
  $$('.tabbar .tab').forEach(btn => {
    btn.addEventListener('click', () => {
      $$('.tabbar .tab').forEach(b => b.classList.remove('is-active'));
      btn.classList.add('is-active');
      showPage(btn.dataset.tab);
      if (btn.dataset.tab === 'clientsPage') renderClients();
      if (btn.dataset.tab === 'todayPage') renderToday();
      if (btn.dataset.tab === 'marketingPage') { bindMarketing(); renderMarketing(); }
      if (btn.dataset.tab === 'suppliesPage') renderSupplies();
      if (btn.dataset.tab === 'settingsPage') fillSettingsForm();
    });
  });
}

function showPage(id){
  $$('.page').forEach(p => p.classList.remove('is-active'));
  $(`#${id}`).classList.add('is-active');
}

// ---------- Header ----------
function bindHeader(){
  // –ü–æ–¥–∫–ª—é—á–∏—Ç—å Drive
  const btnDrive = $('#btnConnectDrive');
  if (btnDrive) {
    btnDrive.addEventListener('click', async () => {
      try {
        await initDriveStack({ forceConsent: true });
        const ds = $('#driveStatus'); if (ds) ds.textContent = 'Drive: –æ–Ω–ª–∞–π–Ω';
        toast('Google Drive –ø–æ–¥–∫–ª—é—á—ë–Ω');
      } catch (e) {
        console.warn('connect drive failed', e);
        const ds = $('#driveStatus'); if (ds) ds.textContent = 'Drive: –æ—Ñ—Ñ–ª–∞–π–Ω';
        toast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Drive');
      }
    });
  }

  // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∞)
  const btnSettings = $('#btnSettings');
  if (btnSettings) {
    btnSettings.addEventListener('click', () => {
  showPage('settingsPage');
  fillSettingsForm(); // ‚Üê –¥–æ–±–∞–≤–∏—Ç—å
  window.scrollTo({ top: 0, behavior: 'smooth' });
});
  }
}
// ---------- Onboarding ----------
function bindOnboarding() {
  // 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ redirect ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  FB.auth.getRedirectResult().then(async (cred) => {
    if (!cred.user) return; // redirect –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è
    await afterLogin(cred);
  }).catch((e) => {
    console.error('redirect result error', e);
    toast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
  });

  // 2) –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äì –ø—Ä–æ–±—É–µ–º popup, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ fallback –≤ redirect
  $('#bootstrapBtn').addEventListener('click', async () => {
    try {
      const provider = new firebase.auth.GoogleAuthProvider();
      provider.addScope('profile');
      provider.addScope('email');
      provider.addScope('https://www.googleapis.com/auth/drive.file');

      // –°–Ω–∞—á–∞–ª–∞ POPUP
      const cred = await FB.auth.signInWithPopup(provider);
      await afterLogin(cred);

    } catch (e) {
      console.warn('popup auth failed, fallback to redirect', e?.code || e);

      // –ß–∞—Å—Ç—ã–µ –∫–æ–¥—ã –¥–ª—è fallback:
      // auth/popup-blocked, auth/popup-closed-by-user, auth/cancelled-popup-request
      const provider = new firebase.auth.GoogleAuthProvider();
      provider.addScope('profile');
      provider.addScope('email');
      provider.addScope('https://www.googleapis.com/auth/drive.file');

      await FB.auth.signInWithRedirect(provider);
      // –î–∞–ª—å—à–µ –≤–µ—Ä–Ω—ë–º—Å—è —Å—é–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –∏ –±–ª–æ–∫ getRedirectResult() –≤—ã—à–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç
    }
  });
}

// –û–±—â–∞—è –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
async function afterLogin(cred) {
  try {
    currentUser = cred.user;
    setDeviceTrusted(currentUser);
    touchDeviceTrust();
    await loadSettings();
fillSettingsForm();
rebuildSourceFilterFromSettings();
        AppState.connected = true;

    showPage('todayPage');
    toast('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. Firestore –≥–æ—Ç–æ–≤.');

    listenClientsRealtime();
listenRemindersRealtime();
listenSuppliesRealtime();

    renderToday();

listenMarketingRealtime();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Drive (–æ–∂–∏–¥–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ)
initDriveStack({ forceConsent: true })
  .then(() => toast('Google Drive –ø–æ–¥–∫–ª—é—á—ë–Ω'))
  .catch(e => {
    console.error(e);
    toast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Drive');
  });


  } catch (e) {
    console.error('afterLogin error', e);
    toast('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
  }
}

// ---------- Firestore realtime ----------
function listenClientsRealtime(){
  FB.db.collection('TattooCRM').doc('app').collection('clients')
    .orderBy('updatedAt', 'desc')   // –±–∞–∑–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    .onSnapshot((qs)=>{
      AppState.clients = [];
      qs.forEach(d => AppState.clients.push(d.data()));
      renderClients();   // –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—ã–±–æ—Ä—É
      renderToday();
// –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ5: –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Ç–æ–≥–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
      const untilInput = document.getElementById('mkPotentialUntil');
      if (untilInput) {
        const totals = mkCalcTotalsAndPotential(AppState.clients, AppState.marketing, untilInput.value);
        mkRenderCardTotals(totals);
 // –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ6: –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã
      if (typeof mkUpdateFinanceCard === 'function') mkUpdateFinanceCard();
      }
    }, (err)=> {
      console.error(err);
      toast('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    });
}
function listenRemindersRealtime(){
  FB.db.collection('TattooCRM').doc('app').collection('reminders')
    .orderBy('date', 'asc')
    .onSnapshot((qs)=>{
      AppState.reminders = [];
      qs.forEach(d => AppState.reminders.push(d.data()));
      renderToday();
    }, (err)=> console.error('reminders', err));
}


// ---------- Settings load/save ----------
async function loadSettings(){
  try {
    const docRef = FB.db.collection('TattooCRM').doc('settings').collection('global').doc('default');
    const doc = await docRef.get();
    AppState.settings = doc.exists ? doc.data() : demoSettings();
try { BOOT.set(6,'ok'); } catch(_) {}
  } catch(e) {
    console.warn(e);
    AppState.settings = demoSettings();
try { BOOT.set(6,'ok'); } catch(_) {}

  }
}

function listenSuppliesRealtime(){
  FB.db.collection('TattooCRM').doc('app').collection('supplies')
    .orderBy('updatedAt', 'desc')
    .onSnapshot((qs)=>{
      AppState.supplies = [];
      qs.forEach(d => AppState.supplies.push(d.data()));
      // –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞
      if (document.querySelector('[data-tab="suppliesPage"]').classList.contains('is-active')) {
        renderSupplies();
 if (typeof mkUpdateFinanceCard === 'function') mkUpdateFinanceCard();
      }
    }, (err)=> {
      console.error(err);
      toast('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤');
    });
}


function renderSuppliesDictEditor(dict = {}){
  const root = $('#supDictEditor');
  if (!root) return;
  root.innerHTML = '';

  const entries = Object.entries(dict);
  if (!entries.length) {
    root.appendChild(buildSupTypeCard('', { units:'—à—Ç' }));
  } else {
    entries.forEach(([name, cfg]) => {
      root.appendChild(buildSupTypeCard(name, cfg || {}));
    });
  }

  const btn = $('#btnAddSupType');
  if (btn && !btn.dataset.bound) {
    btn.dataset.bound = '1';
    btn.addEventListener('click', () => {
      root.appendChild(buildSupTypeCard('', { units:'—à—Ç' }));
    });
  }
  syncSuppliesDictHidden();
}


function bindSuppliesDictToggle(){
  const toggle = $('#supDictToggle');
  const body = $('#supDictBody');
  if (!toggle || !body) return;

  if (!toggle.dataset.bound) {
    toggle.dataset.bound = '1';
    toggle.addEventListener('change', () => {
      body.classList.toggle('collapsed', !toggle.checked);
    });
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–≤–µ—Ä–Ω—É—Ç–æ
  toggle.checked = false;
  body.classList.add('collapsed');
}


function buildSupTypeCard(name, cfg){
 const el = document.createElement('div');
el.className = 'card glass';
  el.style.marginTop = '12px';
  el.innerHTML = `
    <div class="grid two">
      <label class="field">
        <span>–¢–∏–ø</span>
        <input class="typeName" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≥–ª—ã" value="${name ? escapeHtml(name) : ''}">
      </label>

      <label class="field">
        <span>–ï–¥–∏–Ω–∏—Ü–∞</span>
        <select class="unit">
          ${['', '—à—Ç','–º–ª','–≥','–ª','—Å–º','–º–º','—É–ø'].map(u => `
            <option value="${u}" ${u===(cfg.units||'')?'selected':''}>${u||'‚Äî'}</option>
          `).join('')}
        </select>
      </label>

      <label class="field">
        <span>–ü–æ–¥—Ç–∏–ø—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</span>
        <input class="kinds" placeholder="RL, RS, RM, CM" value="${(cfg.kinds||[]).join(', ')}">
      </label>

      <label class="field">
        <span>–†–∞–∑–º–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</span>
        <input class="sizes" placeholder="3,5,7,9,11,13" value="${(cfg.sizes||[]).join(', ')}">
      </label>

      <label class="field">
        <span>–ë—Ä–µ–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
        <input class="brands" placeholder="Eternal, WorldFamous" value="${(cfg.brands||[]).join(', ')}">
      </label>
    </div>

    <div class="row" style="justify-content:flex-end; gap:8px; margin-top:8px">
      <button type="button" class="btn danger" data-del>–£–¥–∞–ª–∏—Ç—å —Ç–∏–ø</button>
    </div>
  `;
  el.querySelector('[data-del]').onclick = () => { el.remove(); syncSuppliesDictHidden(); };
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π JSON –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ
  el.addEventListener('input', () => syncSuppliesDictHidden());
  return el;
}

function readSuppliesDictFromEditor(){
  const root = $('#supDictEditor');
  if (!root) return {};
  const cards = Array.from(root.querySelectorAll('.card'));
  const out = {};
  for (const c of cards) {
    const name = c.querySelector('.typeName')?.value.trim();
    if (!name) continue;
    const units  = c.querySelector('.unit')?.value.trim();
    const kinds  = csv(c.querySelector('.kinds')?.value);
    const sizes  = csvNums(c.querySelector('.sizes')?.value);
    const brands = csv(c.querySelector('.brands')?.value);
    out[name] = {};
    if (units)  out[name].units  = units;
    if (kinds.length)  out[name].kinds  = kinds;
    if (sizes.length)  out[name].sizes  = sizes;
    if (brands.length) out[name].brands = brands;
  }
  return out;
}

function syncSuppliesDictHidden(){
  const hidden = $('#setSuppliesDict');
  if (!hidden) return;
  const obj = readSuppliesDictFromEditor();
  hidden.value = JSON.stringify(obj, null, 2);
}

function csv(s){ return (s||'').split(',').map(v=>v.trim()).filter(Boolean); }
function csvNums(s){ return (s||'').split(',').map(v=>Number(v.trim())).filter(v=>!isNaN(v)); }
function escapeHtml(s){ return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }

function pad2(n){ return n < 10 ? '0'+n : ''+n; }

// –í–µ—Ä–Ω—É—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é YYYY-MM-DD –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ Date (–±–µ–∑ UTC-—Å–¥–≤–∏–≥–∞)
function ymdLocal(dt){
  return `${dt.getFullYear()}-${pad2(dt.getMonth()+1)}-${pad2(dt.getDate())}`;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–¥–≤–∏–≥ –Ω–∞ days –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
function addDaysLocal(dateObj, days){
  const d = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), 
                     dateObj.getHours(), dateObj.getMinutes(), 0, 0);
  d.setDate(d.getDate() + days);
  return d;
}


// === Post-session followups ===
async function createPostSessionReminders(client, sessionISO, titles) {
  const base = new Date(sessionISO);
  const ids = [];
  for (const { after, title } of titles) {
    // –¥–∞—Ç–∞ = –¥–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞ + N –¥–Ω–µ–π
    const d = new Date(base);
    d.setDate(d.getDate() + after);
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    const ymd = `${y}-${m}-${day}`;

    const id = `rm_${crypto.randomUUID().slice(0,8)}`;
    const doc = {
      id, clientId: client.id, clientName: client.displayName,
      date: ymd, title, createdAt: new Date().toISOString()
    };
    await FB.db.collection('TattooCRM').doc('app').collection('reminders').doc(id).set(doc);
    ids.push(id);
  }
  return ids;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å YYYY-MM-DD –≤ "21 –¥–µ–∫–∞–±—Ä—è 2025 –≥."
function formatDateHuman(ymd) {
  if (!ymd) return '';
  const [y,m,d] = ymd.split('-').map(Number);
  if (!y || !m || !d) return ymd;
  const months = [
    '—è–Ω–≤–∞—Ä—è','—Ñ–µ–≤—Ä–∞–ª—è','–º–∞—Ä—Ç–∞','–∞–ø—Ä–µ–ª—è','–º–∞—è','–∏—é–Ω—è',
    '–∏—é–ª—è','–∞–≤–≥—É—Å—Ç–∞','—Å–µ–Ω—Ç—è–±—Ä—è','–æ–∫—Ç—è–±—Ä—è','–Ω–æ—è–±—Ä—è','–¥–µ–∫–∞–±—Ä—è'
  ];
  return `${d} ${months[m-1]} ${y} –≥.`;
}


async function saveSettings(){
  const s = {
    sources: splitTags($('#setSources').value),
    styles: splitTags($('#setStyles').value),
    zones: splitTags($('#setZones').value),
    supplies: splitTags($('#setSupplies').value),
    defaultReminder: $('#setDefaultReminder').value.trim(),
    syncInterval: Math.max(15, Number($('#setSyncInterval').value||60)),
    language: 'ru',
    reminderTemplates: splitTags($('#setReminderTemplates').value),
    reminderDelays: ($('#setReminderDelays').value||'')
      .split(',').map(n => Number(n.trim())).filter(n => !isNaN(n) && n > 0),
    suppliesDict: readSuppliesDictFromEditor()
  };

  // ‚Üê –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
  if (!s.supplies?.length) {
    s.supplies = Object.keys(s.suppliesDict || {});
  }

  try{
    const ref = FB.db.collection('TattooCRM').doc('settings').collection('global').doc('default');
    await ref.set(s, { merge: true });
    AppState.settings = s;
rebuildSourceFilterFromSettings();
    toast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
rebuildSourceFilterFromSettings();
renderClients(); // —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    if (document.querySelector('[data-tab="suppliesPage"]').classList.contains('is-active')) {
      $('#supFilter').dataset.filled = ''; // –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫
      renderSupplies();
    }
  }catch(e){
    console.warn('saveSettings', e);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// ---------- Today ----------
// ---------- Today ----------
function renderToday(todayEvents, futureEvents) {
  // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (!Array.isArray(todayEvents) || !Array.isArray(futureEvents)) {
    const todayYMD = ymdLocal(new Date());
    const all = [];

    // 1) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    (AppState.reminders || []).forEach(r => {
  all.push({
    id: r.id,
    kind: 'reminder',
    clientId: r.clientId,        // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤—è–∑–∫—É
    date: r.date,
    time: '',
    title: r.title || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    who: r.clientName || ''
  });
});

    // 2) –°–µ–∞–Ω—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
    (AppState.clients || []).forEach(c => {
      const sessions = Array.isArray(c.sessions) ? c.sessions : (c?.nextDate ? [c.nextDate] : []);
      sessions.forEach(s => {
        const dt = (typeof s === 'string') ? s : (s?.dt || '');
        if (!dt) return;
        const [d, tFull = ''] = dt.split('T');
        const t = tFull.slice(0, 5); // HH:MM

        all.push({
  id: `${c.id}_${dt}`,
  kind: 'session',
  clientId: c.id,               // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  date: d,
  time: t,
  title: '–°–µ–∞–Ω—Å',
  who: c.displayName || '',
  done: !!(typeof s === 'object' && s.done)
});
      });

      // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞)
      if (c?.consult && c?.consultDate) {
        const [d, tFull = ''] = String(c.consultDate).split('T');
        const t = tFull.slice(0, 5);
       all.push({
  id: `consult_${c.id}_${c.consultDate}`,
  kind: 'consult',
  clientId: c.id,               // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  date: d,
  time: t,
  title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
  who: c.displayName || ''
});
      }
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –¥–∞—Ç–µ, –ø–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all.sort((a, b) => {
      const k1 = `${a.date} ${a.time || '99:99'}`;
      const k2 = `${b.date} ${b.time || '99:99'}`;
      return k1.localeCompare(k2);
    });

    todayEvents  = all.filter(e => e.date === todayYMD);
    futureEvents = all.filter(e => e.date >  todayYMD);
  }

  // –†–µ–Ω–¥–µ—Ä ¬´–°–µ–≥–æ–¥–Ω—è¬ª
  const todayList = document.getElementById('todaySchedule');
  if (!todayList) return;
  todayList.innerHTML = '';

  if (!todayEvents.length) {
    todayList.innerHTML = `<div class="row card-client glass">–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>`;
  } else {
    todayEvents.forEach(ev => {
      const el = document.createElement('div');
      el.className = 'row card-client glass';
      el.innerHTML = `
        üîî <b>${formatDateHuman(ev.date)}</b>${ev.time ? ' ' + ev.time : ''} ‚Äî 
        ${ev.title}${ev.who ? ' ¬∑ ' + ev.who : ''}
      `;

// –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
if (OPEN_CLIENT_ON_TILE_CLICK) {
  el.addEventListener('click', (e) => {
    if (e.target.closest('button')) return;
    if (ev.clientId) openClientById(ev.clientId);
  });
}      // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–∞–Ω—Å–æ–≤
      if (ev.kind === 'session' && !ev.done) {
        const btn = document.createElement('button');
        btn.className = 'btn success';
        btn.textContent = '‚úì';
        btn.title = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–µ–∞–Ω—Å';
        btn.style.padding = '2px 10px';
        btn.addEventListener('click', async (e) => {
  e.stopPropagation();
  e.preventDefault();
  const ok = await confirmDlg('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Å–µ–∞–Ω—Å —Å–æ—Å—Ç–æ—è–ª—Å—è?');
  if (!ok) return;

  // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∂–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É "_"
  const p = ev.id.lastIndexOf('_');
  const clientId = ev.id.slice(0, p);
  const dt       = ev.id.slice(p + 1);

  await setSessionDone(clientId, dt, true);
  toast('–°–µ–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω');
});

        el.appendChild(btn);
      }

      todayList.appendChild(el);
    });
  }

 // –†–µ–Ω–¥–µ—Ä ¬´–í –±—É–¥—É—â–µ–º¬ª
  const futureList = document.getElementById('futureList');
  if (futureList) {
    futureList.innerHTML = '';
    if (!futureEvents.length) {
      futureList.innerHTML = `<div class="row card-client glass">–ë—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>`;
    } else {
     futureEvents.forEach(ev => {
  const row = document.createElement('div');
  row.className = 'row card-client glass';
  row.textContent = `${formatDateHuman(ev.date)}${ev.time ? ' ' + ev.time : ''} ‚Äî ${ev.title}${ev.who ? ' ¬∑ ' + ev.who : ''}`;

  // –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å clientId)
 if (OPEN_CLIENT_ON_TILE_CLICK) {
  row.addEventListener('click', (e) => {
    if (e.target.closest('button')) return;
    if (ev.clientId) openClientById(ev.clientId);
  });
}

  futureList.appendChild(row);
});
    }
  }

    // –†–µ–Ω–¥–µ—Ä ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª
  const remList = document.getElementById('remindersList');
  if (remList) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏: reminders, consults, sessions
    const upcomingAll = (futureEvents || [])
      .filter(ev => ev && ev.date)
      .sort((a, b) => {
        const k1 = `${a.date} ${a.time || '99:99'}`;
        const k2 = `${b.date} ${b.time || '99:99'}`;
        return k1.localeCompare(k2);
      });

    remList.innerHTML = '';
    if (!upcomingAll.length) {
      remList.innerHTML = `<div class="row card-client glass">–ü–æ–∫–∞ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</div>`;
    } else {
      upcomingAll.forEach(ev => {
        const row = document.createElement('div');
        row.className = 'row card-client glass';
        row.style.alignItems = 'center';

        // –ò–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É
        const icon = ev.kind === 'consult' ? 'üìû'
                   : ev.kind === 'session' ? '‚úíÔ∏è'
                   : 'üîî';

        const txt = document.createElement('div');
        txt.innerHTML = `${icon} <b>${formatDateHuman(ev.date)}${ev.time ? ' ' + ev.time : ''}</b> ‚Äî ${ev.title}${ev.who ? ' ¬∑ ' + ev.who : ''}`;
        row.appendChild(txt);
// –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
row.addEventListener('click', (e) => {
  // –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–∫ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  if (e.target.closest('button')) return;
  if (ev.clientId) openClientById(ev.clientId);
});

        // –ö—Ä–µ—Å—Ç–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è ¬´—Ä—É—á–Ω—ã—Ö¬ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reminders)
if (ev.kind === 'reminder' && ev.id) {
  const btn = document.createElement('button');
  btn.type = 'button'; // —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å submit –≥–¥–µ-–Ω–∏–±—É–¥—å –≤ —Ñ–æ—Ä–º–µ
  btn.className = 'btn danger';
  btn.textContent = '‚úï';
  btn.title = '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
  btn.style.padding = '2px 8px';

  btn.addEventListener('click', async (e) => {
    // –∫–ª—é—á–µ–≤–æ–π –∞–Ω—Ç–∏-–∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫
    e.stopPropagation();   // –Ω–µ –¥–∞—ë–º –∫–ª–∏–∫—É –ø–æ–¥–Ω—è—Ç—å—Å—è –¥–æ –∫–∞—Ä—Ç–æ—á–∫–∏ (—á—Ç–æ–±—ã —Ç–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞)
    e.preventDefault();    // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

    const ok = await confirmDlg('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?');
    if (!ok) return;
    try {
      await FB.db.collection('TattooCRM').doc('app')
        .collection('reminders').doc(ev.id).delete();

      // –ª–æ–∫–∞–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É, –ª–∏–±–æ –¥–æ–∂–¥—ë–º—Å—è snapshot
      if (row && row.remove) row.remove();

      toast('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    } catch (e2) {
      console.warn(e2);
      toast('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
    }
  });

  row.appendChild(btn);
}

        remList.appendChild(row);
      });
    }
  }
}  

// boot: UI –≥–æ—Ç–æ–≤–∞
try { BOOT.set(7,'ok'); BOOT.hide(); } catch(_) {}

   
// ---------- Clients ----------
function bindClientsModal(){
  $('#addClientBtn').addEventListener('click', () => openClientDialog());

 $('#attachPhotosBtn').addEventListener('click', async (e)=>{
  e.preventDefault();
  $('#photoInput').click();

  const id = $('#clientDialog').dataset.id;
  if (id) {
    await refreshClientPhotos(id);
  }
});

  $('#openFolderBtn').addEventListener('click', async () => {
    const id = $('#clientDialog').dataset.id;
    if (!id) return;
    const doc = await FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id).get();
    const folderId = doc.data()?.driveFolderId;
    if (!folderId) return toast('–ü–∞–ø–∫–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
    const link = `https://drive.google.com/drive/folders/${folderId}`;
    window.open(link, '_blank');
  });

  $('#shareFolderBtn').addEventListener('click', async () => {
    try{
      const id = $('#clientDialog').dataset.id;
      if (!id) return;
      const doc = await FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id).get();
      const folderId = doc.data()?.driveFolderId;
      if (!folderId) return toast('–ü–∞–ø–∫–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');

      const link = await Drive.shareFolderPublic(folderId);
      await navigator.clipboard.writeText(link);
      toast('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
    }catch(e){
      console.error(e);
      toast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–ø–∫–æ–π');
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ Google Drive (—Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∏ –¥–æ–∫ –≤ Firestore, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
$('#photoInput').addEventListener('change', async (e) => {
  try{
    const files = Array.from(e.target.files || []);
    if (!files.length) return;

    const id = $('#clientDialog').dataset.id;
   if (!id) { toast('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞'); return; }

if (!driveReady) {
  await initDriveStack({ forceConsent: isSafariA2HS ? true : false }).catch(() => {
    toast('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Drive –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ');
    throw new Error('Drive not ready');
  });
}

    const name = ($('#fName').value || '–ë–µ–∑ –∏–º–µ–Ω–∏').trim();
    const clientRef = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id);
    const snap = await clientRef.get();

    let folderId = snap.exists ? (snap.data()?.driveFolderId || null) : null;
    await Drive.ensureLibrary();
driveReady = true;

    if (!folderId) {
      folderId = await Drive.createClientFolder(id, name);
      await clientRef.set({ id, displayName: name, driveFolderId: folderId, updatedAt: new Date().toISOString() }, { merge: true });
    }

    for (const f of files) {
      await Drive.uploadToFolder(folderId, f);
    }

    toast(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${files.length} —Ñ–∞–π–ª(–æ–≤)`);
    $('#photosEmptyNote').style.display = 'none';

    // –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é
    await refreshClientPhotos(id);

  }catch(e){
    console.error(e);
    toast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive');
  } finally {
    e.target.value = '';
  }
});

  // –í–ê–ñ–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
  $('#saveClientBtn').addEventListener('click', saveClientFromDialog);
  $('#deleteClientBtn').addEventListener('click', deleteClientFromDialog);
}

function renderClients(){
  const wrap = $('#clientsList');
  wrap.innerHTML = '';

  const term = ($('#searchInput').value || '').trim().toLowerCase();
  const src = $('#filterSource').value || '';
  const st  = $('#filterStatus').value || '';

  // –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –æ–¥–∏–Ω —Ä–∞–∑
  
  let arr = [...(AppState.clients || [])];
// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
const sortMode = $('#sortClients')?.value || 'updatedAt';
if (sortMode === 'name') {
  arr.sort((a,b) => (a.displayName||'').localeCompare(b.displayName||''));
} else {
  arr.sort((a,b) => (b.updatedAt||'').localeCompare(a.updatedAt||''));
}
  if (term) arr = arr.filter(c => [c.displayName,c.phone,(c.styles||[]).join(',')].join(' ').toLowerCase().includes(term));
  if (src)  arr = arr.filter(c => c.source === src);
  if (st)   arr = arr.filter(c => c.status === st);

  arr.forEach(c=>{
    const card = document.createElement('div');
    card.className = 'card-client glass';

   const tags = (c.styles||[]).slice(0,3).join(', ') || '‚Äî';
const depositVal = Number(c.deposit || 0);
const sessionsSum = (Array.isArray(c.sessions) ? c.sessions : [])
  .reduce((sum, s) => sum + (s?.done ? Number(s.price||0) : 0), 0);
const ltv = depositVal + sessionsSum;

const langBadge = c.lang ? `<span class="badge" title="–Ø–∑—ã–∫">${(c.lang || '').toUpperCase()}</span>` : '';

card.innerHTML = `
  <div class="row" style="justify-content:space-between; gap:8px; align-items:center">
    <div class="row" style="gap:8px; align-items:center">
      <b>${c.displayName}</b>
      ${langBadge}
    </div>
    <div class="badge">${c.status || '–õ–∏–¥'}</div>
  </div>
  <div class="meta">${c.source || '‚Äî'}</div>
  <div class="meta">–î–µ–ø–æ–∑–∏—Ç: ‚Ç¨${depositVal.toFixed(2)} + –°–µ–∞–Ω—Å—ã: ‚Ç¨${sessionsSum.toFixed(2)} = LTV ‚Ç¨${ltv.toFixed(2)}</div>
  <div class="meta">–¢–µ–≥–∏: ${tags}</div>
  <div class="row" style="justify-content:flex-end; gap:8px">
    <button class="btn" data-edit>–û—Ç–∫—Ä—ã—Ç—å</button>
  </div>
`;
    card.querySelector('[data-edit]').addEventListener('click', ()=> openClientDialog(c));
    wrap.appendChild(card);
  });

  $('#searchInput').oninput = () => renderClients();
  $('#filterSource').onchange = () => renderClients();
  $('#filterStatus').onchange = () => renderClients();
$('#sortClients').onchange = () => renderClients();
}

async function refreshClientPhotos(clientId){
  try{
    const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(clientId);
    const snap = await ref.get();
    const folderId = snap.data()?.driveFolderId;
    const grid = $('#photosGrid');

    if (!grid) return;
    grid.innerHTML = '';

    if (!folderId) {
      $('#photosEmptyNote').style.display = 'block';
      return;
    }

    const files = await Drive.listFilesInFolder(folderId, 200);
    if (!files.length) {
      $('#photosEmptyNote').style.display = 'block';
      return;
    }
    $('#photosEmptyNote').style.display = 'none';

    files.forEach(f => {
      const div = document.createElement('div');
      div.className = 'thumb';
      const thumb = f.thumbnailLink || f.iconLink;
      div.innerHTML = `
        <img src="${thumb}" alt="${f.name}">
        <div class="thumb-meta" title="${f.name}">${f.name}</div>
      `;
      div.addEventListener('click', ()=> window.open(f.webViewLink || `https://drive.google.com/file/d/${f.id}/view`, '_blank'));
      grid.appendChild(div);
    });
  }catch(e){
    console.error(e);
  }
}

function bindSupplies(){
  const btnAdd = $('#addSupplyBtn');
  if (btnAdd) {
    btnAdd.addEventListener('click', () => openSupplyDialog(null));
  }
}

function openSupplyDialog(s = null){
  const dlg = $('#supplyDialog');
  const isNew = !s;
  dlg.dataset.id = s?.id || '';

  $('#supplyModalTitle').textContent = isNew ? '–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç –¢–∏–ø–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const typeSel = $('#supType');
  typeSel.innerHTML = '';
  (AppState.settings?.supplies || []).forEach(t=>{
    const o = document.createElement('option'); o.value = t; o.textContent = t; typeSel.appendChild(o);
  });

  const dict = AppState.settings?.suppliesDict || {};
  function fillDependentFields(){
  const t = $('#supType').value;
  const d = (AppState.settings?.suppliesDict || {})[t] || {};

  // –ï–¥–∏–Ω–∏—Ü–∞
  $('#supUnit').value = (s?.unit) || d.units || '';

  // –ü–æ–¥—Ç–∏–ø
  const kindSel = $('#supKind');
  const kindTxt = $('#supKindText');
  kindSel.innerHTML = '';
  const kinds = d.kinds || [];
  if (kinds.length) {
    kinds.forEach(k => {
      const o = document.createElement('option');
      o.value = k; o.textContent = k; kindSel.appendChild(o);
    });
    kindSel.style.display = '';
    kindTxt.style.display = 'none';
  } else {
    kindSel.style.display = 'none';
    kindTxt.style.display = '';
  }

  // –ë—Ä–µ–Ω–¥—ã
  const brandSel = $('#supBrand');
  const brandTxt = $('#supBrandText');
  brandSel.innerHTML = '';
  const brands = d.brands || [];
  if (brands.length) {
    brands.forEach(b => {
      const o = document.createElement('option');
      o.value = b; o.textContent = b; brandSel.appendChild(o);
    });
    brandSel.style.display = '';
    brandTxt.style.display = 'none';
  } else {
    brandSel.style.display = 'none';
    brandTxt.style.display = '';
  }

  // –†–∞–∑–º–µ—Ä—ã
  const sizeSel = $('#supSize');
  const sizeTxt = $('#supSizeText');
  sizeSel.innerHTML = '';
  const sizes = d.sizes || [];
  if (sizes.length) {
    sizes.forEach(sz => {
      const o = document.createElement('option');
      o.value = String(sz); o.textContent = String(sz); sizeSel.appendChild(o);
    });
    sizeSel.style.display = '';
    sizeTxt.style.display = 'none';
  } else {
    sizeSel.style.display = 'none';
    sizeTxt.style.display = '';
  }
}



  typeSel.onchange = fillDependentFields;

  // –ü—Ä–æ—Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
  typeSel.value = s?.cat || (AppState.settings?.supplies?.[0] || '');
fillDependentFields();

// —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:
if ($('#supKind').style.display !== 'none') { $('#supKind').value = s?.kind || ''; }
else { $('#supKindText').value = s?.kind || ''; }

if ($('#supBrand').style.display !== 'none') { $('#supBrand').value = s?.brand || ''; }
else { $('#supBrandText').value = s?.brand || ''; }

if ($('#supSize').style.display !== 'none') { $('#supSize').value = s?.size || ''; }
else { $('#supSizeText').value = s?.size || ''; }    $('#supName').value = s?.name || '';
  $('#supQty').value  = (typeof s?.qty === 'number') ? s.qty : 1;
  $('#supUnit').value = s?.unit || $('#supUnit').value;
  $('#supLink').value = s?.link || '';
  $('#supNote').value = s?.note || '';

  // –ö–Ω–æ–ø–∫–∏
  $('#deleteSupplyBtn').style.display = isNew ? 'none' : '';
  $('#saveSupplyBtn').onclick = saveSupplyFromDialog;
  $('#deleteSupplyBtn').onclick = deleteSupplyFromDialog;

  dlg.showModal();
}

function buildSupplyName({cat, brand, kind, size, note, fallback}){
  const parts = [cat, brand, kind, size ? `‚åÄ${size}` : '', note].filter(Boolean);
  const s = parts.join(' ');
  return s || (fallback || '–ü–æ–∑–∏—Ü–∏—è');
}

async function saveSupplyFromDialog(){
  const dlg = $('#supplyDialog');
  let id = dlg.dataset.id;
  const isNew = !id;
  if (isNew) id = `sp_${crypto.randomUUID().slice(0,8)}`;

  const cat  = $('#supType').value.trim();
  const kind = ($('#supKind').style.display !== 'none'

  ? $('#supKind').value.trim()
  : $('#supKindText').value.trim());

const brand = ($('#supBrand').style.display !== 'none'
  ? $('#supBrand').value.trim()
  : $('#supBrandText').value.trim());

const size = ($('#supSize').style.display !== 'none'
  ? $('#supSize').value.trim()
  : $('#supSizeText').value.trim());
  const qty  = Number($('#supQty').value || 0);
  const unit = $('#supUnit').value.trim();
  const link = $('#supLink').value.trim();
  const note = $('#supNote').value.trim();

 const name = ($('#supName').value.trim()) || buildSupplyName({cat, brand, kind, size, note, fallback:'–ü–æ–∑–∏—Ü–∏—è'});

  const item = {
  id, cat, kind, brand, size, name, qty, unit, link, note,
  left: qty,
  updatedAt: new Date().toISOString()
};

  // –õ–æ–∫–∞–ª—å–Ω–æ ‚Äî –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—á—Ç–æ–±—ã UI –æ—Ç—Ä–∏—Å–æ–≤–∞–ª—Å—è —Å—Ä–∞–∑—É)
  const i = AppState.supplies.findIndex(x => x.id === id);
  if (i >= 0) AppState.supplies[i] = item; else AppState.supplies.push(item);
  renderSupplies();

  // Firestore
  try {
    const ref = FB.db.collection('TattooCRM').doc('app').collection('supplies').doc(id);
    await ref.set(item, { merge:true });
    toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
  } catch(e){
    console.warn(e);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }

  dlg.close();
}

async function deleteSupplyFromDialog(){
  const dlg = $('#supplyDialog');
  const id = dlg.dataset.id;
  if (!id) { dlg.close(); return; }

  // –£–¥–∞–ª–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
  AppState.supplies = AppState.supplies.filter(x => x.id !== id);
  renderSupplies();

  // Firestore (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ)
  try{
    await FB.db.collection('TattooCRM').doc('app').collection('supplies').doc(id).delete();
    toast('–£–¥–∞–ª–µ–Ω–æ');
  }catch(e){
    console.warn(e);
    toast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
  }

  dlg.close();
}



// –ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–≤—à–∏–π—Å—è (done=true/false)
// –ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–≤—à–∏–π—Å—è (done=true/false)
// –ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–≤—à–∏–π—Å—è (done=true/false)
async function setSessionDone(clientId, dtIso, done = true) {
  // –Ω–∞–π–¥—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω—É–∂–Ω—ã–π —Å–µ–∞–Ω—Å
  let c = (AppState.clients || []).find(x => x.id === clientId);
  if (!c) {
    // —Ñ–æ–ª–±—ç–∫: –±–µ—Ä—ë–º –∏–∑ Firestore, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–µ–π—Ç –Ω–µ —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
   const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(clientId);
    const snap = await ref.get();
   if (snap.exists) c = snap.data();
  }
  if (!c) throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  const sessions = Array.isArray(c.sessions) ? [...c.sessions] : [];
  const idx = sessions.findIndex(s => (typeof s === 'object' ? s.dt : s) === dtIso);
  if (idx < 0) throw new Error('–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const prev = sessions[idx];
  const wasDone = !!(typeof prev === 'object' && prev.done);
  const sObj = (typeof prev === 'object') ? { ...prev } : { dt: prev, price: 0 };

  sObj.done = !!done;

  // –µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–≤–∏–º done=true ‚Äî —Å–æ–∑–¥–∞—ë–º follow-up –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 1/3/10/60 –¥–Ω–µ–π
  if (!wasDone && sObj.done && !sObj.postRemindersCreated) {
    try {
      const ids = await createPostSessionReminders(c, sObj.dt, [
        { after: 1,  title: '–°–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' },
        { after: 3,  title: '–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ' },
        { after: 10, title: '–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ' },
        { after: 60, title: '–°–ø—Ä–æ—Å–∏—Ç—å, –≤—Å—ë –ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è' } // ‚âà 2 –º–µ—Å—è—Ü–∞
      ]);
      sObj.postRemindersCreated = true;
      sObj.postReminderIds = ids;
    } catch (e) {
      console.warn('createPostSessionReminders', e);
    }
  }

  // –ª–æ–∫–∞–ª—å–Ω–æ –∏ UI
  sessions[idx] = sObj;
  c.sessions = sessions;
  c.updatedAt = new Date().toISOString();
  renderToday();
  renderClients();

  // Firestore
  const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(clientId);
  await ref.set({ sessions, updatedAt: c.updatedAt }, { merge: true });
}

function addSessionField(s = { dt: '', price: '', done: false }) {
  const wrap = document.createElement('div');
  wrap.className = 'row';
  wrap.style.margin = '6px 0';
  wrap.style.alignItems = 'center';
  wrap.style.gap = '8px';

  wrap.innerHTML = `
    <!-- 1) –ì–∞–ª–æ—á–∫–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞) -->
    <input type="checkbox"
           class="sessionDone"
           ${s.done ? 'checked' : ''}
           title="–°–µ–∞–Ω—Å —Å–æ—Å—Ç–æ—è–ª—Å—è"
           aria-label="–°–µ–∞–Ω—Å —Å–æ—Å—Ç–æ—è–ª—Å—è"
           style="width:20px; height:20px; accent-color:#ff9d3a;">

    <!-- 2) –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è -->
    <input type="datetime-local"
           class="sessionDate"
           value="${s.dt || ''}"
           style="flex:1; min-width:180px">

    <!-- 3) –°—É–º–º–∞ -->
    <input type="number"
           step="0.01" min="0"
           class="sessionPrice"
           placeholder="‚Ç¨"
           value="${(s.price ?? '')}"
           title="–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞, ‚Ç¨"
           style="width:120px">

    <!-- 4) –£–¥–∞–ª–∏—Ç—å -->
    <button type="button" class="btn danger" title="–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É">‚úï</button>
  `;

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
  wrap.querySelector('button').onclick = () => wrap.remove();
// –≥–∞–ª–æ—á–∫–∞ ¬´—Å–µ–∞–Ω—Å —Å–æ—Å—Ç–æ—è–ª—Å—è¬ª ‚Äî —Å–æ–∑–¥–∞—ë—Ç/—Å–Ω–∏–º–∞–µ—Ç done –∏ (–ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏) –¥–µ–ª–∞–µ—Ç follow-ups
  const cb = wrap.querySelector('.sessionDone');
  const dtInput = wrap.querySelector('.sessionDate');

  cb.addEventListener('change', async () => {
    const dlg = document.getElementById('clientDialog');
    const clientId = dlg?.dataset?.id;
    const dt = dtInput?.value?.trim();

    if (!clientId) { toast('–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞'); cb.checked = !cb.checked; return; }
    if (!dt) { toast('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–µ–∞–Ω—Å–∞'); cb.checked = !cb.checked; return; }

    try {
      await setSessionDone(clientId, dt, cb.checked);
      toast(cb.checked ? '–°–µ–∞–Ω—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë–Ω' : '–û—Ç–º–µ—Ç–∫–∞ —Å–Ω—è—Ç–∞');
    } catch (e) {
      console.warn(e);
      toast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∞–Ω—Å');
      cb.checked = !cb.checked;
    }
  });
  $('#sessionsList').appendChild(wrap);
}

// --- –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ---

function formatDateTimeHuman(iso){
  try {
    const d = new Date(iso);
    return d.toLocaleString('ru-RU', { day:'2-digit', month:'2-digit', year:'numeric', hour:'2-digit', minute:'2-digit' });
  } catch { return iso; }
}

// –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—Ç —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é /clients/{id}/statusLogs
async function logStatusChange(clientId, fromStatus, toStatus){
  if (!clientId || fromStatus === toStatus) return;
  const ts = new Date().toISOString();

  const ref = FB.db
    .collection('TattooCRM').doc('app')
    .collection('clients').doc(clientId)
    .collection('statusLogs').doc(String(Date.now())); // –ø—Ä–æ—Å—Ç–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id

  await ref.set({ ts, from: fromStatus || null, to: toStatus || null });
}

// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
function bindStatusHistory(clientId){
  const box = document.getElementById('statusHistory');
  if (!box || !clientId) return;

  box.innerHTML = '<div class="meta">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>';

  const q = FB.db
    .collection('TattooCRM').doc('app')
    .collection('clients').doc(clientId)
    .collection('statusLogs').orderBy('ts', 'desc');

  // live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  return q.onSnapshot(snap=>{
    const arr = [];
    snap.forEach(doc => arr.push(doc.data()));
    renderStatusHistory(arr);
  }, ()=> {
    box.innerHTML = '<div class="meta">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</div>';
  });

  function renderStatusHistory(items){
    if (!items.length){
      box.innerHTML = '<div class="empty-note">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
      return;
    }
    box.innerHTML = '';
    items.forEach(it=>{
      const row = document.createElement('div');
      row.className = 'row';
      row.innerHTML = `
        <div class="what">${(it.from || '‚Äî')} ‚Üí <b>${it.to || '‚Äî'}</b></div>
        <div class="when">${formatDateTimeHuman(it.ts)}</div>
      `;
      box.appendChild(row);
    });
  }
}


async function openClientDialog(c = null){
  const dlg = $('#clientDialog');
  if (!dlg) { toast('–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }

  try {
    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞–ª–∏–ø–∞–ª¬ª –Ω–µ–≤–∏–¥–∏–º—ã–π backdrop
    dlg.showModal();
    console.log('[clientDialog] open', { id: c?.id });

    const isNew = !c;
    const id = c?.id || `cl_${crypto.randomUUID().slice(0,8)}`;
    dlg.dataset.id = id;
    $('#clientModalTitle').textContent = isNew ? '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç' : (c?.displayName || '–ö–ª–∏–µ–Ω—Ç');

    // –ò—Å—Ç–æ—á–Ω–∏–∫ (select)
{
  const fSource = $('#fSource');
  if (fSource) {
    fSource.replaceChildren();
    (AppState.settings?.sources || []).forEach(s => {
      const o = document.createElement('option');
      o.textContent = s;
      fSource.appendChild(o);
    });
  } else {
    console.warn('[clientDialog] #fSource not found');
  }
}

// –°—Ç–∏–ª–∏ (multiple select)
{
  const fStyles = $('#fStyles');
  if (fStyles) {
    fStyles.replaceChildren();
    (AppState.settings?.styles || []).forEach(st => {
      const o = document.createElement('option');
      o.value = st; o.textContent = st;
      if ((c?.styles || []).includes(st)) o.selected = true;
      fStyles.appendChild(o);
    });
  } else {
    console.warn('[clientDialog] #fStyles not found');
  }
}

// –ó–æ–Ω—ã (multiple select)
{
  const fZones = $('#fZones');
  if (fZones) {
    fZones.replaceChildren();
    (AppState.settings?.zones || []).forEach(z => {
      const o = document.createElement('option');
      o.value = z; o.textContent = z;
      if ((c?.zones || []).includes(z)) o.selected = true;
      fZones.appendChild(o);
    });
  } else {
    console.warn('[clientDialog] #fZones not found');
  }
}


// –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
$('#fName').value   = c?.displayName || '';
$('#fPhone').value  = c?.phone || '';
$('#fLink').value   = c?.link || '';
const fLang = $('#fLang'); if (fLang) fLang.value = c?.lang || '';
const fGender = $('#fGender'); if (fGender) fGender.value = c?.gender || '';

const fSourceSel = $('#fSource'); if (fSourceSel) fSourceSel.value = c?.source || (AppState.settings?.sources?.[0] || '');

    // –ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
    const firstContactEl = $('#fFirstContact');
    if (firstContactEl) {
      firstContactEl.value = c?.firstContactDate || new Date().toISOString().slice(0,10);
    }
    const firstEl = $('#fFirst');
    if (firstEl) {
      firstEl.value = String(c?.first ?? true);
    }

    // –°—Ç–∞—Ç—É—Å—ã/—Ç–∏–ø—ã/–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
    $('#fType').value   = c?.type || '–ù–æ–≤–∞—è';
    $('#fStatus').value = c?.status || '–õ–∏–¥';
  {
  const q = String(c?.qual || '').toLowerCase();
  let v = '–£—Å–ª–æ–≤–Ω–æ-—Ü–µ–ª–µ–≤–æ–π';                 // –¥–µ—Ñ–æ–ª—Ç
  if (q.includes('–Ω–µ —Ü–µ–ª') || q.includes('–Ω–µ—Ü–µ–ª')) v = '–ù–µ —Ü–µ–ª–µ–≤–æ–π';
  else if (q.includes('—É—Å–ª–æ–≤–Ω–æ')) v = '–£—Å–ª–æ–≤–Ω–æ-—Ü–µ–ª–µ–≤–æ–π';
  else if (q.includes('—Ü–µ–ª–µ–≤–æ–π')) v = '–¶–µ–ª–µ–≤–æ–π';
  $('#fQual').value = v;
}
$('#fQualNote').value = c?.qualNote || '';

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∑–∞–º–µ—Ç–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É)
$('#fNotes').value = c?.notes || '';

// –î–µ–ø–æ–∑–∏—Ç
$('#fDeposit').value = c?.deposit || '';

// –≤–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º cold-mode
toggleColdLeadMode($('#fStatus').value === '–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥');
$('#fStatus').onchange = (e) => {
  toggleColdLeadMode(e.target.value === '–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥');
};

    // –û–∑–≤—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: –æ—Ç/–¥–æ (—Å —É—á–µ—Ç–æ–º ¬´–Ω–∞—Å–ª–µ–¥–∏—è¬ª)
    const minEl = $('#fAmountMin');
    const maxEl = $('#fAmountMax');
    let aMin = c?.amountMin;
    let aMax = c?.amountMax;
    if ((aMin == null && aMax == null) && (c?.amount != null)) {
      const n = Number(c.amount);
      if (!isNaN(n)) { aMin = n; aMax = n; }
    }
    minEl.value = (aMin ?? '');
    maxEl.value = (aMax ?? '');

    // –°–µ–∞–Ω—Å—ã ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    const list = $('#sessionsList');
const rawSessions = c?.sessions || (c?.nextDate ? [c.nextDate] : []);

if (list) {
  list.innerHTML = '';
  rawSessions.forEach(s => {
    if (typeof s === 'string') {
      addSessionField({ dt: s, price: '', done: false });
    } else {
      addSessionField({ dt: s?.dt || '', price: (s?.price ?? ''), done: !!s?.done });
    }
  });
  if (!list.children.length) addSessionField({ dt:'', price:'' });

  const addBtn = $('#btnAddSession');
  if (addBtn) addBtn.onclick = () => addSessionField({ dt:'', price:'' });
} else {
  console.warn('[clientDialog] #sessionsList not found ‚Äî –¥–æ–±–∞–≤—å –±–ª–æ–∫ –≤ index.html');
}

    // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (—Å–≤–∏—Ç—á + –¥–∞—Ç–∞)
    $('#fConsultOn').checked = !!(c?.consult);
    $('#fConsultDate').value = c?.consultDate ? c.consultDate.slice(0,16) : '';
    $('#consultDateField').style.display = $('#fConsultOn').checked ? '' : 'none';
    $('#fConsultOn').onchange = () => {
      $('#consultDateField').style.display = $('#fConsultOn').checked ? '' : 'none';
    };

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: —à–∞–±–ª–æ–Ω—ã –∏ ¬´—á–µ—Ä–µ–∑ N –¥–Ω–µ–π¬ª (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
{
  const tplSel = $('#fReminderTpl');
  if (tplSel) {
    tplSel.innerHTML = '<option value="">‚Äî —à–∞–±–ª–æ–Ω ‚Äî</option>';
    (AppState.settings?.reminderTemplates || []).forEach(t => {
      const o = document.createElement('option');
      o.value = t;
      o.textContent = t;
      tplSel.appendChild(o);
    });
  } else {
    console.warn('[clientDialog] #fReminderTpl not found');
  }

  const afterSel = $('#fReminderAfter');
  if (afterSel) {
    afterSel.innerHTML = '<option value="">–¥–Ω–∏</option>';
    (AppState.settings?.reminderDelays || []).forEach(d => {
      const o = document.createElement('option');
      o.value = String(d);
      o.textContent = `—á–µ—Ä–µ–∑ ${d}`;
      afterSel.appendChild(o);
    });
  } else {
    console.warn('[clientDialog] #fReminderAfter not found');
  }

  const titleInput = $('#fReminderTitle');
  if (titleInput) {
    titleInput.value = '';
  } else {
    console.warn('[clientDialog] #fReminderTitle not found');
  }
}


    // –§–æ—Ç–æ/–ø—Ä–µ–≤—å—é
    $('#photosGrid').innerHTML = '';
    $('#photosEmptyNote').style.display = 'block';
    await refreshClientPhotos(id);

    // –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)
    const remWrap = $('#clientReminders');
    if (remWrap) {
      remWrap.innerHTML = '';
      const myRems = (AppState.reminders || [])
        .filter(r => r.clientId === c?.id)
        .filter(r => !(r.title && /^–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:/i.test(r.title)));
      if (!myRems.length) {
        remWrap.innerHTML = '<div class="meta">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç</div>';
      } else {
        myRems.forEach(r => {
          const row = document.createElement('div');
          row.className = 'row';
          row.style.alignItems = 'center';
          row.style.justifyContent = 'space-between';
          row.style.margin = '4px 0';

          const text = document.createElement('div');
          text.className = 'meta';
          text.textContent = `üîî ${formatDateHuman(r.date)} ‚Äî ${r.title}`;

          const btn = document.createElement('button');
          btn.className = 'btn danger';
          btn.textContent = '‚úï';
          btn.title = '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
          btn.style.padding = '2px 8px';
          btn.addEventListener('click', async () => {
            if (!r?.id) { toast('–£ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ—Ç id'); return; }
            const ok = await confirmDlg('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?');
            if (!ok) return;
            try {
              await FB.db.collection('TattooCRM').doc('app').collection('reminders').doc(r.id).delete();
              row.remove(); // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ
              toast('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            } catch (e) {
              console.warn(e);
              toast('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
            }
          });

          row.appendChild(text);
          row.appendChild(btn);
          remWrap.appendChild(row);
        });
      }
    }

// –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
bindStatusHistory(id);
    console.log('[clientDialog] filled');
  } catch (e) {
    console.error('[clientDialog] fail', e);
    toast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞');
    try { dlg.close(); } catch (_) {}
  }
}
async function openClientById(clientId){
  if (!clientId) return;
  const cached = (AppState.clients || []).find(x => x.id === clientId);
  if (cached) { openClientDialog(cached); return; }

  try {
    const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(clientId);
    const snap = await ref.get();
    if (snap.exists) {
      openClientDialog(snap.data());
    } else {
      toast('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch(e){
    console.warn(e);
    toast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞');
  }
}

// --- Cold Lead Mode ---
// –ü—Ä—è—á–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å "–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥"
// --- Cold Lead Mode ---
// –ü—Ä—è—á–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å "–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥"
function toggleColdLeadMode(isCold) {
  // helper: —Å–ø—Ä—è—Ç–∞—Ç—å –æ–±—ë—Ä—Ç–∫—É –±–ª–∏–∂–∞–π—à–µ–≥–æ .field/.row/.grid.two
  const hideWrap = (id) => {
    const el = document.getElementById(id);
    if (!el) return;
    const wrap = el.closest('.field, .row, .grid.two') || el;
    wrap.style.display = isCold ? 'none' : '';
  };

  // –±–ª–æ–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –¥–µ–Ω—å–≥–∏)
  const hideBlock = (sel) => {
    const el = document.querySelector(sel);
    if (el) el.style.display = isCold ? 'none' : '';
  };

  // 1) –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø—Ä—è—á–µ–º
  [
    // –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
    'fQual', 'fQualNote',
    // –ø–µ—Ä–≤–∞—è —Ç–∞—Ç—É, —Ç–∏–ø, —Ç–µ–≥–∏, –∑–æ–Ω—ã
    'fFirst', 'fType', 'fStyles', 'fZones',
    // —Å—É–º–º—ã/–¥–µ–ø–æ–∑–∏—Ç (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ "–¥–µ–Ω—å–≥–∏")
    'fAmountMin', 'fAmountMax', 'fDeposit',
    // —Å–µ–∞–Ω—Å—ã –∏ –≤—Å—è –∏—Ö ¬´—Å—Ç—Ä–æ–∫–∞¬ª
    'sessionsList',
    // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    'fReminderTpl', 'fReminderAfter', 'fReminderTitle', 'clientReminders',
    // –∑–∞–º–µ—Ç–∫–∞
    'fNotes'
  ].forEach(hideWrap);

  // 2) —Ü–µ–ª—ã–µ —Å—Ç—Ä–æ–∫–∏-—Å–µ–∫—Ü–∏–∏
  hideBlock('#rowConsult');
  hideBlock('#rowMoney');

  // 3) —Ñ–æ—Ç–æ–ø–∞–Ω–µ–ª—å —Ü–µ–ª–∏–∫–æ–º
  const photosPanel = document.getElementById('photosGrid')?.closest('.panel');
  if (photosPanel) photosPanel.style.display = isCold ? 'none' : '';

  // 4) ¬´–î–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤¬ª ‚Äî —É –Ω–∏—Ö —Å–≤–æ—è –æ–±—ë—Ä—Ç–∫–∞ .field
  const sessionsField = document.getElementById('sessionsList')?.closest('.field');
  if (sessionsField) sessionsField.style.display = isCold ? 'none' : '';
}


async function saveClientFromDialog(){
  let id = $('#clientDialog').dataset.id;

  const displayName = $('#fName').value.trim();

  const isNew = !id || !id.startsWith('cl_');
  if (isNew) {
    id = `cl_${crypto.randomUUID().slice(0,8)}`;
    $('#clientDialog').dataset.id = id;
  }
const prevStatus = (AppState.clients.find(x => x.id === id) || {}).status || '';
const statusVal = $('#fStatus').value;

  // --- –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Ö–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥ ---
  if (statusVal === '–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥') {
    const client = {
    id,
    displayName,
    phone: $('#fPhone').value.trim(),
    status: statusVal,
    source: $('#fSource').value || '',                // ‚Üê –∏—Å—Ç–æ—á–Ω–∏–∫
    link: $('#fLink').value.trim() || '',             // ‚Üê –∫–æ–Ω—Ç–∞–∫—Ç (—Å—Å—ã–ª–∫–∞)
    firstContactDate: $('#fFirstContact').value || '',  // ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
    lang: $('#fLang').value || '',           // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
gender: $('#fGender').value || '',
 updatedAt: new Date().toISOString()
  };

    const i = AppState.clients.findIndex(x => x.id === id);
    if (i >= 0) AppState.clients[i] = client; else AppState.clients.push(client);
    renderClients();

    try {
      const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id);
      await ref.set(client, { merge:true });
// –õ–æ–≥ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
try { await logStatusChange(id, prevStatus, statusVal); } catch(_) {}
      toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (—Ö–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥)');
    } catch(e) {
      console.warn('save cold lead', e);
      toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }

    $('#clientDialog').close();
    return; // ‚Üê –≤—ã—Ö–æ–¥–∏–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  }

// --- –û–∑–≤—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: –æ—Ç/–¥–æ ---
let amountMin = Number(($('#fAmountMin')?.value ?? '').trim());
let amountMax = Number(($('#fAmountMax')?.value ?? '').trim());

// –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º NaN –≤ null
if (isNaN(amountMin)) amountMin = null;
if (isNaN(amountMax)) amountMax = null;

// –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º
if (amountMin != null && amountMax == null) amountMax = amountMin;
if (amountMax != null && amountMin == null) amountMin = amountMax;

// –µ—Å–ª–∏ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ ‚Äî –ø–æ–º–µ–Ω—è–µ–º
if (amountMin != null && amountMax != null && amountMin > amountMax) {
  const t = amountMin; amountMin = amountMax; amountMax = t;
}

 const client = {
  id,
  displayName,
  phone: $('#fPhone').value.trim(),
  link: $('#fLink').value.trim(),
source: $('#fSource').value.trim(),
lang: $('#fLang').value || '',            // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
gender: $('#fGender').value || '',
firstContactDate: ($('#fFirstContact').value || new Date().toISOString().slice(0,10)),
first: ($('#fFirst').value === 'true'),
  type: $('#fType').value.trim(),
styles: Array.from($('#fStyles').selectedOptions).map(o=>o.value),
zones: Array.from($('#fZones').selectedOptions).map(o=>o.value),status: $('#fStatus').value,
qual: $('#fQual').value,
qualNote: $('#fQualNote').value.trim(),            // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
deposit: Number($('#fDeposit').value || 0),
amountMin,                 // –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å
amountMax,                 // –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å
amount: (amountMax ?? amountMin ?? 0),  // –ª–µ–≥–∞—Å–∏: –ø–∏—à–µ–º —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è
notes: $('#fNotes').value.trim(),
  sessions: Array.from(document.querySelectorAll('#sessionsList .row'))
  .map(row => {
    const dt = row.querySelector('.sessionDate')?.value;
    if (!dt) return null;
    const priceNum = Number(row.querySelector('.sessionPrice')?.value || 0);
    const done = !!row.querySelector('.sessionDone')?.checked;
    return { dt, price: isNaN(priceNum) ? 0 : priceNum, done };
  })
  .filter(Boolean),

  // NEW
  // --- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –µ—Å–ª–∏ —Å–≤–∏—Ç—á –≤–∫–ª—é—á—ë–Ω –∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º; –∏–Ω–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  ...( (() => {
    const on = $('#fConsultOn').checked;
    const date = $('#fConsultDate').value;
    if (on && date) {
      return { consult: true, consultDate: date };
    } else {
      return { consult: false, consultDate: '' };
    }
  })() ),

  updatedAt: new Date().toISOString()
};




  const i = AppState.clients.findIndex(x => x.id === id);
  if (i >= 0) AppState.clients[i] = client; else AppState.clients.push(client);
  renderClients();

  try {
    const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id);
    // 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
await ref.set(client, { merge:true });
// NEW: –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
try { await logStatusChange(id, prevStatus, $('#fStatus').value); } catch(_) {}

    // --- –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω/–≤–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç,
// –∏ –í–°–ï–ì–î–ê –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∞–Ω—Å–æ–≤)
// --- –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã)
try {
  const remCol = FB.db.collection('TattooCRM').doc('app').collection('reminders');

  // 1) —Å—Ç–∞—Ä—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id –≤–∏–¥–∞ rc_<clientId>
  await remCol.doc(`rc_${client.id}`).delete().catch(()=>{});

  // 2) –ª—é–±—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –≥–¥–µ title –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:"
  const snap = await remCol.where('clientId', '==', client.id).get();
  const batch = FB.db.batch();
  snap.forEach(doc => {
    const r = doc.data() || {};
    if (r.title && /^–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:/i.test(r.title)) batch.delete(doc.ref);
  });
  try { await batch.commit(); } catch(_) {}
} catch (e) {
  console.warn('cleanup consult reminders', e);
}    // 2) –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    if (driveReady) {
      const snap = await ref.get();
      let folderId = snap.data()?.driveFolderId || null;
      if (!folderId) {
        folderId = await Drive.createClientFolder(id, displayName || '–ë–µ–∑ –∏–º–µ–Ω–∏');
        await ref.set({ driveFolderId: folderId, updatedAt: new Date().toISOString() }, { merge: true });
      }
      // 3) –û–±–Ω–æ–≤–∏–º –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–∫ (–µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –µ—â—ë –æ—Ç–∫—Ä—ã—Ç–∞)
      if ($('#clientDialog').open) {
        await refreshClientPhotos(id);
      }
    }
 // --- –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
    try {
      const title = ($('#fReminderTitle').value || '').trim() || $('#fReminderTpl').value.trim();
      if (title) {
        const afterDays = Number($('#fReminderAfter').value || 0);
        const dateObj = addDaysLocal(new Date(), isNaN(afterDays) ? 0 : afterDays);
        const ymd = ymdLocal(dateObj);

        const remId = `rm_${crypto.randomUUID().slice(0,8)}`;
        const reminder = {
          id: remId,
          clientId: client.id,
          clientName: client.displayName,
          date: ymd,
          title,
          createdAt: new Date().toISOString()
        };

        await FB.db.collection('TattooCRM').doc('app').collection('reminders').doc(remId).set(reminder);
      }
    } catch (e) {
      console.warn('autoReminder', e);
    }
    toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
  } catch(e) {
    console.warn('saveClientFromDialog', e);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }

  $('#clientDialog').close();
}

async function deleteClientFromDialog(){
  const id = $('#clientDialog').dataset.id;
  if (!id) { $('#clientDialog').close(); return; }

  // 1) –£–±–µ—Ä—ë–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞, —á—Ç–æ–±—ã UI —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏–ª—Å—è
  AppState.clients = AppState.clients.filter(x => x.id !== id);
  renderClients();

  try {
    // 2) –ü—Ä–æ—á–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å driveFolderId (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const ref = FB.db.collection('TattooCRM').doc('app').collection('clients').doc(id);
    const snap = await ref.get();
    const data = snap.exists ? snap.data() : null;
    const folderId = data?.driveFolderId || null;

    // 3) –£–¥–∞–ª–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º)
    const rs = await FB.db.collection('TattooCRM').doc('app').collection('reminders')
      .where('clientId', '==', id).get();
    const batch = FB.db.batch();
    rs.forEach(d => {
      batch.delete(FB.db.collection('TattooCRM').doc('app').collection('reminders').doc(d.id));
    });
    await batch.commit();

    // 4) –£–¥–∞–ª–∏–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Firestore ‚Äî –ö–õ–Æ–ß–ï–í–û!
    await ref.delete();

    // 5) –û—Ç–ø—Ä–∞–≤–∏–º –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ Google Drive (–µ—Å–ª–∏ –±—ã–ª–∞)
    try {
      const canTrash = (typeof Drive?.trashFile === 'function');
      if (folderId && canTrash) {
        await Drive.trashFile(folderId, /* hard= */ false); // –º—è–≥–∫–æ, –≤ –∫–æ—Ä–∑–∏–Ω—É
      }
    } catch (e) {
      console.warn('Drive trash failed', e);
    }

    toast('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω');
  } catch (e) {
    console.warn('deleteClientFromDialog', e);
    toast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
  } finally {
    $('#clientDialog').close();
  }
}

// ---------- Marketing ----------

/**
 * –ê–≥–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –ø–æ –¥–Ω—è–º:
 * - –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ï–ï –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏),
 * - —Å—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å,
 * - –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ (–ø–æ–¥–ø–∏—Å—á–∏–∫–∏_—Å–µ–≥–æ–¥–Ω—è - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏_–≤—á–µ—Ä–∞),
 * - –≤–Ω–∏–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—â–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å–µ –¥–Ω–∏.
 */
function renderMarketing() {
  const wrap = $('#mkHistory');
  if (!wrap) return;

  const items = Array.isArray(AppState.marketing) ? [...AppState.marketing] : [];
  items.sort((a,b) => (String(a.date||'')+String(a.time||'')).localeCompare(String(b.date||'')+String(b.time||'')));

  let totalFollowers = 0;
  let prevSpentTotal = 0;
  let totalSpent = 0;

  const rows = items.map(e => {
    totalFollowers += Number(e.delta || 0);
    const daySpent = Number(e.spentTotal || 0) - prevSpentTotal;
    prevSpentTotal = Number(e.spentTotal || 0);
    totalSpent = prevSpentTotal;

    return `
      <div class="row" style="justify-content:space-between; padding:6px 0">
        <div><b>${formatDateHuman(e.date)}</b></div>
        <div>+${e.delta || 0} (–ò—Ç–æ–≥–æ: ${totalFollowers})</div>
        <div>–†–∞—Å—Ö–æ–¥ –¥–Ω—è: ‚Ç¨${daySpent.toFixed(2)}</div>
      </div>
    `;
  });

   const footer = items.length ? `
    <div class="row card-client glass" style="margin-top:10px; justify-content:space-between">
      <div><b>–ò—Ç–æ–≥–æ</b></div>
      <div>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: <b>${totalFollowers}</b></div>
      <div>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ‚Ç¨${totalSpent.toFixed(2)}</div>
    </div>
  ` : '';

  // NEW: –æ–±–Ω–æ–≤–ª—è–µ–º ¬´Instagram ‚Üí xxx –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤¬ª –≤ –∫–∞—Ä—Ç–æ—á–∫–µ ‚Ññ1 (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥-—Å–≤–æ–¥–∫–∞)
  const igBox = document.getElementById('mk-instagram-followers');
  if (igBox) {
    igBox.textContent = `${totalFollowers} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`;
  }

   wrap.innerHTML = rows.length ? rows.join('') + footer : `<div class="row">–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>`;
}

// === helper: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª ===
// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø / –ü–†–ï–î–û–ü–õ–ê–¢–ê / –≠–°–ö–ò–ó / –°–ï–ê–ù–° (–∏–ª–∏ –º–∞—Å—Å–∏–≤ sessions)
function isQualifiedClient(c) {
  const raw = (c?.status ?? c?.stage ?? c?.type ?? '').toString().toLowerCase();
  const st = (typeof normalizeStatus === 'function') ? normalizeStatus(raw) : raw;

  const hasDeposit  = Number(c?.deposit || 0) > 0;
  const hasSessions = Array.isArray(c?.sessions) && c.sessions.length > 0;

  // –°—Ç–∞—Ç—É—Å—ã ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª (–ø–æ–∫—Ä—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞)
  const WORK_STATES = new Set([
    'consult', 'consult_booked', 'consult_confirmed', 'consult_done',
    'deposit', 'design', 'sketch', 'sketch_done',
    'session', 'session_booked', 'session_confirmed', 'session_done'
  ]);

  const inWorkByStatus =
    !!st &&
    (
      WORK_STATES.has(st) ||
      st.includes('consult') || st.includes('–∫–æ–Ω—Å') ||
      st.includes('deposit') || st.includes('–¥–µ–ø–æ–∑–∏—Ç') ||
      st.includes('sketch')  || st.includes('—ç—Å–∫–∏–∑') ||
      st.startsWith('session') || st.includes('—Å–µ–∞–Ω—Å')
    );

  return hasDeposit || hasSessions || inWorkByStatus;
}

// === helper: –ø–æ–ª—É—á–∏—Ç—å YYYY-MM-DD –∏–∑ –¥–∞—Ç—ã/—Å—Ç—Ä–æ–∫–∏ ===
function ymdOf(dt) {
  if (!dt) return '';
  const s = String(dt);
  const ymd = s.split('T')[0];
  return ymd || s;
}

// === Totals & Potential (—Å —É—á—ë—Ç–æ–º ¬´–∫–ª–∏–µ–Ω—Ç–æ–≤-–≤ —Ä–∞–±–æ—Ç–µ¬ª) ===
// (–Ω–∏–∂–µ —É–∂–µ –∏–¥—ë—Ç —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è mkCalcTotalsAndPotential(...) ‚Äî –æ–Ω–∞ —ç—Ç–∏ —Ö–µ–ª–ø–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)



// === [NEW] Totals & Potential (–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ5) ===============================

function mkGetLatestAdsSpentTotal(marketingArr) {
  const arr = Array.isArray(marketingArr) ? [...marketingArr] : [];
  arr.sort((a,b) => (String(a.date||'')+String(a.time||'')).localeCompare(String(b.date||'')+String(b.time||'')));
  const last = arr[arr.length - 1];
  return Number(last?.spentTotal || 0);
}

// === [NEW] –§–∏–Ω–∞–Ω—Å—ã (–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ6) ===============================

// –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ total –ø–æ —Ä–µ–∫–ª–∞–º–µ
function mkGetLatestAdsSpentTotal(marketingArr) {
  const arr = Array.isArray(marketingArr) ? [...marketingArr] : [];
  arr.sort((a,b) => (String(a.date||'')+String(a.time||'')).localeCompare(String(b.date||'')+String(b.time||'')));
  const last = arr[arr.length - 1];
  return Number(last?.spentTotal || 0);
}

// –ú–µ–¥–∏–∞–Ω–∞/–∫–≤–∞–Ω—Ç–∏–ª–∏
function _quantiles(nums) {
  const a = nums.slice().sort((x,y)=>x-y);
  const q = (p) => {
    if (!a.length) return 0;
    const idx = (a.length - 1) * p;
    const lo = Math.floor(idx), hi = Math.ceil(idx);
    return (a[lo] + a[hi]) / 2;
  };
  return { p25: q(0.25), med: q(0.5), p75: q(0.75) };
}

// –ì–ª–∞–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç
function mkCalcFinanceMetrics(clients, marketingArr, suppliesArr, cutoffYmd, useSupplies = false) {
  const list = Array.isArray(clients) ? clients : [];
  const cutoff = cutoffYmd ? String(cutoffYmd) : '';
  // –ø–µ—Ä–∏–æ–¥ = –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü cutoff-–¥–∞—Ç—ã
  const co = cutoff ? new Date(cutoff) : new Date();
  const ymStart = new Date(co.getFullYear(), co.getMonth(), 1);
  const ymEnd   = new Date(co.getFullYear(), co.getMonth()+1, 0);
  const startYMD = ymdOf(ymStart.toISOString());
  const endYMD   = ymdOf(ymEnd.toISOString());

  const adsSpent = mkGetLatestAdsSpentTotal(marketingArr); // —Ä–µ–∫–ª–∞–º–∞ ¬´–Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª

  let depositsSum = 0;
  let sessionsSum = 0;
  let sessionsCnt = 0;
  const sessionPrices = [];

  // –∫–ª–∏–µ–Ω—Ç—ã
  const payingClientIds = new Set();
  const newPayingClientIds = new Set();
  const repeatClientIds = new Set();
  let canceledClients = 0;

  for (const c of list) {
    // –¥–µ–ø–æ–∑–∏—Ç—ã —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —á–∞—Å—Ç—å gross, –µ—Å–ª–∏ –æ–Ω–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –¥–∞—Ç—ã ‚Äî –±–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å)
    depositsSum += Number(c?.deposit || 0) || 0;

    // —Å–µ–∞–Ω—Å—ã
    const sessions = Array.isArray(c?.sessions) ? c.sessions : [];
    const doneBeforePeriod = sessions.some(s => {
      const dt = ymdOf(typeof s === 'string' ? s : s?.dt);
      return (typeof s === 'object' && s.done) && dt && dt < startYMD;
    });

    let hadInPeriod = false;

    for (const s of sessions) {
      const dt = ymdOf(typeof s === 'string' ? s : s?.dt);
      const price = Number(typeof s === 'object' ? (s.price || 0) : 0);
      const isDone = (typeof s === 'object' && !!s.done);

      if (!dt) continue;

      // —Å—É–º–º–∏—Ä—É–µ–º –¥–µ–Ω—å–≥–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–∞–Ω—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      if (dt >= startYMD && dt <= endYMD && isDone) {
        sessionsSum += price;
        sessionsCnt += 1;
        sessionPrices.push(price);
        hadInPeriod = true;
      }
    }

    // —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—è—â–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    if (hadInPeriod) {
      payingClientIds.add(c.id);
      if (doneBeforePeriod) repeatClientIds.add(c.id);
      else newPayingClientIds.add(c.id);
    }

    // –æ—Ç–º–µ–Ω—ã ‚Äî –≥—Ä—É–±–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É –∫–ª–∏–µ–Ω—Ç–∞ (–æ—Ü–µ–Ω–∫–∞)
    const st = normalizeStatus(c?.status || c?.stage || c?.type);
    if (st === 'canceled') canceledClients += 1;
  }

  const gross = depositsSum + sessionsSum;

  // —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: —Å–µ–π—á–∞—Å –º–æ–¥–µ–ª–∏ —Ü–µ–Ω—ã/—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç ‚Üí —Å—á–∏—Ç–∞–µ–º 0, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª—è.
  // –•—É–∫ –Ω–∞ –±—É–¥—É—â–µ–µ: –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è suppliesArr[i].cost –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è ‚Äî —Å—É–º–º–∏—Ä—É–π –∑–¥–µ—Å—å.
  const suppliesCost = useSupplies ? 0 : 0;

  const net = Math.max(0, gross - adsSpent - suppliesCost);

  // —Å—Ä–µ–¥–Ω–∏–µ/–º–µ–¥–∏–∞–Ω—ã –ø–æ ¬´—Å–µ–∞–Ω—Å–∞–º¬ª (–±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤)
  const avgCheck    = sessionsCnt ? (sessionsSum / sessionsCnt) : 0;
  const avgNetCheck = sessionsCnt ? ((sessionsSum - adsSpent - suppliesCost) / sessionsCnt) : 0;
  const { p25, med, p75 } = _quantiles(sessionPrices);

  // —Ä–µ–∫–ª–∞–º–∞
  const roi = adsSpent > 0 ? (gross / adsSpent) : 0; // –≤—ã—Ä—É—á–∫–∞ –Ω–∞ 1 ‚Ç¨
  const profitPerEuro = adsSpent > 0 ? ((gross - adsSpent - suppliesCost) / adsSpent) : 0;

  // —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ ¬´–Ω–æ–≤—ã–µ –ø–ª–∞—Ç—è—â–∏–µ¬ª –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ)
  const costPerClient = newPayingClientIds.size > 0
    ? (adsSpent / newPayingClientIds.size)
    : 0;

  // –æ—Ç–º–µ–Ω—ã –∫–∞–∫ –¥–æ–ª—è —Å—Ä–µ–¥–∏ ¬´—Å–µ–∞–Ω—Å —Å–æ—Å—Ç–æ—è–ª—Å—è¬ª + ¬´–æ—Ç–º–µ–Ω–∏–ª¬ª (–æ—Ü–µ–Ω–∫–∞)
  const denomForCancel = sessionsCnt + canceledClients;
  const cancelPct = denomForCancel > 0 ? Math.round((canceledClients / denomForCancel) * 100) : 0;

  // –≤–æ–∑–≤—Ä–∞—Ç—ã
  const uniqueCount = payingClientIds.size;
  const repeatPct = uniqueCount > 0 ? Math.round((repeatClientIds.size / uniqueCount) * 100) : 0;

  return {
    period: { startYMD, endYMD },
    gross, sessionsSum, net,
    avgCheck, avgNetCheck,
    medianCheck: med, p25, p75,
    ads: { spent: adsSpent, roi, profitPerEuro, costPerClient },
    clients: { uniqueCount, repeatPct, cancelPct }
  };
}

function mkRenderCardFinance(data) {
  const list = document.getElementById('mk-finance-list');
  if (!list || !data) return;

  list.innerHTML = `
    <li><b>–í—ã—Ä—É—á–∫–∞ (gross)</b> ‚Äî —Å–µ–∞–Ω—Å—ã + –¥–µ–ø–æ–∑–∏—Ç—ã: <b>‚Ç¨${data.gross.toFixed(2)}</b></li>
    <li>–î–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: ‚Ç¨${data.sessionsSum.toFixed(2)}</li>
    <li><b>–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞ (net)</b> ${data.ads.spent>0?'(–º–∏–Ω—É—Å —Ä–µ–∫–ª–∞–º–∞'+(document.getElementById('mkIncludeSupplies')?.checked?', —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':'')+')':''}: <b>‚Ç¨${data.net.toFixed(2)}</b></li>
    <li>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ‚Ç¨${data.avgCheck.toFixed(2)}</li>
    <li>–°—Ä–µ–¥–Ω–∏–π ¬´—á–∏—Å—Ç—ã–π¬ª —á–µ–∫: ‚Ç¨${data.avgNetCheck.toFixed(2)}</li>
    <li>–ú–µ–¥–∏–∞–Ω–Ω—ã–π —á–µ–∫: ‚Ç¨${data.medianCheck.toFixed(2)} (P25‚ÄìP75: ‚Ç¨${data.p25.toFixed(2)}‚Äì‚Ç¨${data.p75.toFixed(2)})</li>

    <li class="mk-sub">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã</li>
    <li>–í—ã—Ä—É—á–∫–∞ –Ω–∞ 1 ‚Ç¨ —Ä–µ–∫–ª–∞–º—ã: ‚Ç¨${data.ads.roi.toFixed(2)}</li>
    <li>–ü—Ä–∏–±—ã–ª—å –Ω–∞ 1 ‚Ç¨ —Ä–µ–∫–ª–∞–º—ã: ‚Ç¨${data.ads.profitPerEuro.toFixed(2)}</li>
    <li>–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–µ–∫–ª–∞–º—ã: ‚Ç¨${data.ads.costPerClient.toFixed(2)}</li>

    <li class="mk-sub">–ö–ª–∏–µ–Ω—Ç—ã</li>
    <li>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—è—â–∏–µ: ${data.clients.uniqueCount}</li>
    <li>% –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ / –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö: ${data.clients.repeatPct}%</li>
    <li>–î–æ–ª—è –æ—Ç–º–µ–Ω: ${data.clients.cancelPct}%</li>
  `;
}


// === helper: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª ===
// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø / –ü–†–ï–î–û–ü–õ–ê–¢–ê / –≠–°–ö–ò–ó / –°–ï–ê–ù–° (–∏–ª–∏ –º–∞—Å—Å–∏–≤ sessions)
function isQualifiedClient(c) {
  const st = typeof normalizeStatus === 'function'
    ? normalizeStatus(c?.status || c?.stage || c?.type)
    : String(c?.status || c?.stage || c?.type || '').toLowerCase();

  const hasDeposit = Number(c?.deposit || 0) > 0;
  const hasSessions = Array.isArray(c?.sessions) && c.sessions.length > 0;

  // –°—Ç–∞—Ç—É—Å—ã ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª (–ø–æ–∫—Ä—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞)
  const WORK_STATES = new Set([
    'consult', 'consult_booked', 'consult_confirmed', 'consult_done',
    'deposit', 'design', 'sketch', 'sketch_done',
    'session', 'session_booked', 'session_confirmed', 'session_done'
  ]);

  const inWorkByStatus =
    !!st &&
    (WORK_STATES.has(st) ||
     st.includes('consult') || st.includes('–∫–æ–Ω—Å') ||
     st.includes('deposit') || st.includes('–¥–µ–ø–æ–∑–∏—Ç') ||
     st.includes('sketch')  || st.includes('—ç—Å–∫–∏–∑') ||
     st.startsWith('session') || st.includes('—Å–µ–∞–Ω—Å'));

  return hasDeposit || hasSessions || inWorkByStatus;
}

// === helper: –ø–æ–ª—É—á–∏—Ç—å YYYY-MM-DD –∏–∑ –¥–∞—Ç—ã/—Å—Ç—Ä–æ–∫–∏ ===
function ymdOf(dt) {
  if (!dt) return '';
  const s = String(dt);
  const ymd = s.split('T')[0];
  return ymd || s;
}

// === Totals & Potential (—Å —É—á—ë—Ç–æ–º ¬´–∫–ª–∏–µ–Ω—Ç–æ–≤-–≤ —Ä–∞–±–æ—Ç–µ¬ª) ===
function mkCalcTotalsAndPotential(clients, marketingArr, cutoffYmd) {
  const clientsArr = Array.isArray(clients) ? clients : [];
  const cutoff = cutoffYmd ? String(cutoffYmd) : '';

  // 1) –†–µ–∫–ª–∞–º–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ spentTotal
  const adsSpent = mkGetLatestAdsSpentTotal(marketingArr);

  // 2) –ü—Ä–µ–¥–æ–ø–ª–∞—Ç—ã (–ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
  let depCount = 0, depSum = 0;
  for (const c of clientsArr) {
    const v = Number(c?.deposit || 0);
    if (v > 0) { depCount++; depSum += v; }
  }

  // 3) –°–µ–∞–Ω—Å—ã (–ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ ‚Äî –≤—Å–µ–≥–¥–∞; –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–æ cutoff –≤–∫–ª—é—á.)
  let doneCount = 0, doneSum = 0;
  let planCount = 0, planSum = 0;

  for (const c of clientsArr) {
    const sessions = Array.isArray(c?.sessions) ? c.sessions : [];
    for (const s of sessions) {
      const obj = (typeof s === 'object') ? s : { dt: s, price: 0, done: false };
      const ymd = ymdOf(obj.dt);
      const price = Number(obj.price || 0);

      if (obj.done) {
        doneCount++; 
        doneSum += price;
      } else {
        if (!cutoff || (ymd && ymd <= cutoff)) {
          planCount++; 
          planSum += price;
        }
      }
    }
  }

  // 4) –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª + —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π "–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π –¥–∞—Ç–µ"
  let potMin = 0, potMax = 0;

  for (const c of clientsArr) {
    if (!isQualifiedClient(c)) continue;

    // --- —Ä–µ—à–∞–µ–º, –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –≠–¢–û–ì–û –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ cutoff ---
    let includeForCutoff = true;
    if (cutoff) {
      // –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –ù–ï–ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const sessions = Array.isArray(c?.sessions) ? c.sessions : [];
      const plannedYmds = sessions
        .filter(s => !(typeof s === 'object' ? s.done : false))
        .map(s => ymdOf(typeof s === 'object' ? s.dt : s))
        .filter(Boolean)
        .sort();

      if (plannedYmds.length) {
        // –µ—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∞—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∂–µ cutoff ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–µ–¥–µ—Ç ¬´–≤ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥¬ª
        includeForCutoff = plannedYmds[0] <= cutoff;
      } else if (c?.consult && c?.consultDate) {
        // –±–µ–∑ —Å–µ–∞–Ω—Å–æ–≤, –Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –¥–∞—Ç–æ–π ‚Äî –≤–∫–ª—é—á–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ cutoff
        includeForCutoff = ymdOf(c.consultDate) <= cutoff;
      } else {
        // –≤–æ–æ–±—â–µ –±–µ–∑ –¥–∞—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º (–º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç)
        includeForCutoff = true;
      }
    }
    if (!includeForCutoff) continue;

    // –û–∑–≤—É—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    let aMin = c?.amountMin, aMax = c?.amountMax;
    if (aMin == null && aMax == null && c?.amount != null) {
      const n = Number(c.amount);
      if (!isNaN(n)) { aMin = n; aMax = n; }
    }
    let minNum = Number(aMin || 0);
    let maxNum = Number(aMax || 0);

    // –í—ã—á–∏—Ç–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –∏ –ü–†–û–í–ï–î–Å–ù–ù–´–ï –¥–æ cutoff
    const dep = Number(c?.deposit || 0);
    let doneSumClient = 0;
    const sessions = Array.isArray(c?.sessions) ? c.sessions : [];
    for (const s of sessions) {
      const obj = (typeof s === 'object') ? s : { dt: s, price: 0, done: false };
      if (!obj.done) continue;
      const ymd = ymdOf(obj.dt);
      if (!cutoff || (ymd && ymd <= cutoff)) {
        doneSumClient += Number(obj.price || 0);
      }
    }

    minNum = Math.max(0, minNum - dep - doneSumClient);
    maxNum = Math.max(0, maxNum - dep - doneSumClient);

    potMin += minNum;
    potMax += maxNum;
  }

  return {
    adsSpent,
    deposits: { count: depCount, sum: depSum },
    sessionsDone: { count: doneCount, sum: doneSum },
    sessionsPlanned: { count: planCount, sum: planSum },
    potential: { min: potMin, max: potMax }
  };
}
function mkRenderCardTotals(totals) {
  if (!totals) return;
  const set = (id, txt) => { const el = document.getElementById(id); if (el) el.textContent = txt; };

  set('mk-ads-spent', `‚Ç¨${totals.adsSpent.toFixed(2)}`);
  set('mk-deposits', `${totals.deposits.count} —à—Ç., ‚Ç¨${totals.deposits.sum.toFixed(2)}`);
  set('mk-sessions-done', `${totals.sessionsDone.count} —à—Ç., ‚Ç¨${totals.sessionsDone.sum.toFixed(2)}`);
  set('mk-sessions-planned', `${totals.sessionsPlanned.count} —à—Ç., ‚Ç¨${totals.sessionsPlanned.sum.toFixed(2)}`);
  set('mk-potential-range', `‚Ç¨${totals.potential.min.toFixed(2)} ‚Äî ‚Ç¨${totals.potential.max.toFixed(2)}`);
}

// ===== –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ6: –§–∏–Ω–∞–Ω—Å—ã =====
function mkUpdateFinanceCard() {
  const cutoff = document.getElementById('mkPotentialUntil')?.value || '';
  const useSup = !!document.getElementById('mkIncludeSupplies')?.checked;

  const data = mkCalcFinanceMetrics(
    AppState.clients || MK_CLIENTS_CACHE,
    AppState.marketing,
    AppState.supplies,
    cutoff,
    useSup
  );
  mkRenderCardFinance(data);
}


/** –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏–∑ —Ñ–æ—Ä–º—ã */
async function saveMarketingEntry(){
  const date = $('#mkDate').value || ymdLocal(new Date());
  const time = $('#mkTime').value || new Date().toISOString().slice(11,16);

  const delta = Number($('#mkDelta').value || 0);          // +–ø–æ–¥–ø–∏—Å—á–∏–∫–∏
  const spentTotal = Number($('#mkSpentTotal').value || 0); // –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫ –¥–∞—Ç–µ

  const id = `mk_${date}_${time.replace(':','')}`;
  const entry = { id, date, time, delta, spentTotal };

  // –ª–æ–∫–∞–ª—å–Ω–æ
  AppState.marketing = AppState.marketing || [];
  const i = AppState.marketing.findIndex(x=>x.id===id);
  if (i>=0) AppState.marketing[i] = entry; else AppState.marketing.push(entry);

  renderMarketing();

  // Firestore
  try {
    const ref = FB.db.collection('TattooCRM').doc('app').collection('marketing').doc(id);
    await ref.set(entry, { merge:true });
    toast('–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    $('#mkDelta').value = '';
    $('#mkSpentTotal').value = '';
  } catch(e) {
    console.warn(e);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞');
  }
}
/** –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∏–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ) */
function bindMarketing(){
  const btn = document.getElementById('saveMkBtn');
  if (btn && !btn.dataset.bound) {
    btn.dataset.bound = '1';
    btn.addEventListener('click', saveMarketingEntry);
  }
}

/** –†–µ–∞–ª—Ç–∞–π–º-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é marketing */
function listenMarketingRealtime(){
  FB.db.collection('TattooCRM').doc('app').collection('marketing')
    .orderBy('date','asc')   // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    .onSnapshot(qs => {
      const arr = [];
      qs.forEach(d => arr.push(d.data()));
      // –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ+–≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      arr.sort((a,b) => (String(a.date||'')+String(a.time||'')).localeCompare(String(b.date||'')+String(b.time||'')));
      AppState.marketing = arr;
 // –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ5: –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
      const untilInput = document.getElementById('mkPotentialUntil');
      if (untilInput) {
        const totals = mkCalcTotalsAndPotential(AppState.clients || MK_CLIENTS_CACHE, AppState.marketing, untilInput.value);
        mkRenderCardTotals(totals);
      }
      renderMarketing();
 if (typeof mkUpdateFinanceCard === 'function') mkUpdateFinanceCard();
    }, err => console.error('marketing', err));
}



// ---------- Supplies ----------
function renderSupplies(){
  const list = $('#suppliesList');
  if (!list) return;
  list.innerHTML = '';

  const items = Array.isArray(AppState.supplies) ? AppState.supplies : [];

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π 1 —Ä–∞–∑
  const catSel = $('#supFilter');
  if (catSel && !catSel.dataset.filled) {
    (AppState.settings?.supplies || []).forEach(c=>{
      const o = document.createElement('option'); o.value = c; o.textContent = c;
      catSel.appendChild(o);
    });
    catSel.dataset.filled = '1';
    catSel.onchange = renderSupplies;
  }

  const catFilter = catSel?.value || '';
  const arr = catFilter ? items.filter(i => (i.cat||'') === catFilter) : items;

  if (!arr.length) {
    list.innerHTML = `<div class="row card-client glass">–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</div>`;
    return; // ‚Üê —Ç–µ–ø–µ—Ä—å —ç—Ç–æ—Ç return —Å–Ω–æ–≤–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  }

  arr.forEach(s=>{
    const card = document.createElement('div');
    card.className='card-client glass';
    const left = (typeof s.left === 'number') ? s.left : (s.qty ?? '');
    const meta = [s.cat||'', s.brand||'', s.kind||'', s.size?`‚åÄ${s.size}`:'', s.unit||'']
      .filter(Boolean).join(' ¬∑ ');
    card.innerHTML = `
      <div class="row" style="justify-content:space-between">
        <div><b>${s.name}</b> ¬∑ <span class="meta">${meta}</span></div>
        <div class="badge">${left}</div>
      </div>
      <div class="row" style="justify-content:flex-end; gap:8px">
        ${s.link ? `<a class="btn ghost" href="${s.link}" target="_blank">–ó–∞–∫–∞–∑–∞—Ç—å</a>` : ''}
        <button class="btn" data-edit>–û—Ç–∫—Ä—ã—Ç—å</button>
      </div>
    `;
    card.querySelector('[data-edit]').addEventListener('click', ()=> openSupplyDialog(s));
    list.appendChild(card);
  });
}

// ---------- Settings ----------

// –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–µ–ª–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å—Ç—Ä–æ–≥–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function rebuildSourceFilterFromSettings() {
  const sel = $('#filterSource');
  if (!sel) return;

  // –∑–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä
  const keep = sel.value || '';

  // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
  sel.innerHTML = '';
  const oAll = document.createElement('option');
  oAll.value = ''; oAll.textContent = '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏';
  sel.appendChild(oAll);

  (AppState.settings?.sources || []).forEach(src => {
    const o = document.createElement('option');
    o.value = src; o.textContent = src;
    sel.appendChild(o);
  });

  // –≤–µ—Ä–Ω—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
  if ([...sel.options].some(o => o.value === keep)) sel.value = keep;
}

// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å—Ç—Ä–æ–≥–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –¥—É–±–ª–µ–π)
function rebuildSourceFilterFromSettings() {
  const sel = document.querySelector('#filterSource');
  if (!sel) return;

  const keep = sel.value || '';
  sel.innerHTML = ''; // –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å—Ç–∏–º

  const oAll = document.createElement('option');
  oAll.value = '';
  oAll.textContent = '–ò—Å—Ç–æ—á–Ω–∏–∫: –≤—Å–µ';
  sel.appendChild(oAll);

  (AppState.settings?.sources || []).forEach(src => {
    const o = document.createElement('option');
    o.value = src;
    o.textContent = src;
    sel.appendChild(o);
  });

  if ([...sel.options].some(o => o.value === keep)) sel.value = keep;
}

function bindSettings(){
  $('#saveSettingsBtn').addEventListener('click', saveSettings);
  $('#logoutBtn').addEventListener('click', ()=>{
    FB.auth.signOut();
    toast('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
    location.reload();
});



} // ‚Üê –∑–∞–∫—Ä—ã–ª–∏ bindSettings()
 function fillSettingsForm(){
  const s = AppState.settings || demoSettings();
  $('#setSources').value  = (s.sources||[]).join(', ');
  $('#setStyles').value   = (s.styles||[]).join(', ');
  $('#setZones').value    = (s.zones||[]).join(', ');
  $('#setSupplies').value = (s.supplies||[]).join(', ');
  $('#setDefaultReminder').value = s.defaultReminder || '';
$('#setReminderTemplates').value = (s.reminderTemplates||[]).join(', ');
$('#setReminderDelays').value = (s.reminderDelays||[]).join(', ');
$('#setSuppliesDict').value = JSON.stringify(s.suppliesDict || {}, null, 2);
renderSuppliesDictEditor(s.suppliesDict || {});
bindSuppliesDictToggle();
 $('#setSyncInterval').value = s.syncInterval ?? 60;

 rebuildSourceFilterFromSettings();
}




// ---------- Utils ----------

// ---------- Google Identity Services token manager ----------
// –í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏ CLIENT_ID –Ω–∞ —Å–≤–æ–π –∏–∑ Firebase Console:
// Firebase Console ‚Üí Authentication ‚Üí Sign-in method ‚Üí Google ‚Üí Web SDK configuration (–∏–ª–∏ GCP ‚Üí Credentials)

const GOOGLE_CLIENT_ID = '306275735842-9iebq4vtv2pv9t6isia237os0r1u3eoi.apps.googleusercontent.com';

const OAUTH_SCOPES = 'https://www.googleapis.com/auth/drive.file openid email profile';


let gisTokenClient = null;
let driveAccessToken = null;
let driveTokenExpTs = 0; // ms timestamp

function initGISTokenClient() {
  if (gisTokenClient) return;
  gisTokenClient = google.accounts.oauth2.initTokenClient({
    client_id: GOOGLE_CLIENT_ID,
    scope: OAUTH_SCOPES,
    // callback –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ ensureDriveAccessToken()
    callback: () => {}
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è Drive –±–µ—Å—à—É–º–Ω–æ.
 * - –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∂–∏–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
 * - –ï—Å–ª–∏ –ø—Ä–æ—Ç—É—Ö ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å prompt: '' (–±–µ–∑ UI).
 * - –ï—Å–ª–∏ –ø—Ä–∞–≤ –µ—â—ë –Ω–µ –±—ã–ª–æ ‚Äî –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å forceConsent=true –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞.
 */
function ensureDriveAccessToken({ forceConsent = false } = {}) {
  return new Promise((resolve, reject) => {
    const needsRefresh = !driveAccessToken || Date.now() > (driveTokenExpTs - 60_000);
    if (!needsRefresh) return resolve(driveAccessToken);

    initGISTokenClient();

    gisTokenClient.callback = (resp) => {
      if (resp && resp.access_token) {
        driveAccessToken = resp.access_token;
        // expires_in –æ–±—ã—á–Ω–æ ~3600 —Å; –ø–æ—Å—Ç–∞–≤–∏–º –∑–∞–ø–∞—Å -60 —Å
      const sec = Number(resp.expires_in || 3600);
driveTokenExpTs = Date.now() + (sec - 60) * 1000;

gapi.client.setToken({ access_token: driveAccessToken });
saveAccessToken(driveAccessToken, sec);
return resolve(driveAccessToken);
      }
      reject(new Error('No access_token from GIS'));
    };

    try {
      // –ï—Å–ª–∏ forceConsent=true (–ø–µ—Ä–≤—ã–π –ª–æ–≥–∏–Ω) ‚Äî –ø–æ–∫–∞–∂–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ;
      // –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Ç–∏—Ö–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–µ–∑ UI.
      gisTokenClient.requestAccessToken({
        prompt: forceConsent ? 'consent' : ''
      });
    } catch (e) {
      reject(e);
    }
  });
}

async function initDriveStack({ forceConsent = false } = {}) {
  try{
    // 3) GIS
    await waitFor(() => window.google && google.accounts && google.accounts.oauth2);
    try { BOOT.set(3,'ok'); } catch(_) {}

    // 4) gapi client
await waitFor(() => window.gapi);
await Drive.loadGapi();
try { BOOT.set(4,'ok'); } catch(_) {}

// 4.5) access token ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫—ç—à–∞, –∏–Ω–∞—á–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
const cachedTok = (typeof getSavedAccessToken === 'function') && getSavedAccessToken();
if (cachedTok) {
  driveAccessToken = cachedTok;
  gapi.client.setToken({ access_token: driveAccessToken });
} else {
  await withTimeout(ensureDriveAccessToken({ forceConsent }), 3000, 'gis_token_timeout');
}

// 5) Drive library (–ø–∞–ø–∫–∏)
try {
  await Drive.ensureLibrary();
driveReady = true;
  const __ds = document.querySelector('#driveStatus'); if (__ds) __ds.textContent = 'Drive: –æ–Ω–ª–∞–π–Ω';
  try { BOOT.set(5,'ok'); } catch(_) {}
  // —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–Ω–µ –∂–¥—ë–º)
  ensureDriveAccessToken({ forceConsent: false }).catch(console.warn);
} catch (e) {
  console.warn('Drive library skipped', e);
  try { BOOT.set(5,'err','Drive –æ—Ç–ª–æ–∂–µ–Ω'); } catch(_) {}
}


    
    // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!window.__driveAutoRefresh) {


      window.__driveAutoRefresh = setInterval(() => {
        ensureDriveAccessToken().catch(console.warn);
      }, 45 * 60 * 1000);
    }
  }catch(e){
    console.warn('initDriveStack', e);
    try { BOOT.set(3,'err', e.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Drive'); } catch(_) {}
    throw e;
  }
}


// –•—Ä–∞–Ω–∏–º Google Drive access_token –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ –æ–¥–∏–Ω —á–∞—Å –ø—Ä–∏–º–µ—Ä–Ω–æ)
function saveAccessToken(token, ttlSeconds = 3600) {
  try {
    const data = {
      token,
      exp: Date.now() + ttlSeconds * 1000
    };
    localStorage.setItem('gAccessToken', JSON.stringify(data));
  } catch (e) { /* ignore */ }
}

function getSavedAccessToken() {
  try {
    const raw = localStorage.getItem('gAccessToken');
    if (!raw) return null;
    const data = JSON.parse(raw);
    if (!data?.token || !data?.exp) return null;
    if (Date.now() > data.exp) return null; // –ø—Ä–æ—Ç—É—Ö
    return data.token;
  } catch (e) {
    return null;
  }
}

// --- Trusted device (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç) ---
const TRUST_KEY = 'tcrm_device';

function setDeviceTrusted(user) {
  try {
    localStorage.setItem(TRUST_KEY, JSON.stringify({
      uid: user?.uid || null,
      ts: Date.now()
    }));
  } catch(_) {}
}

function isDeviceTrusted(maxAgeDays = 14) {
  try {
    const raw = localStorage.getItem(TRUST_KEY);
    if (!raw) return false;
    const { uid, ts } = JSON.parse(raw);
    if (!ts) return false;
    return (Date.now() - ts) < maxAgeDays * 24 * 60 * 60 * 1000;
  } catch(_) { return false; }
}

function touchDeviceTrust(){
  try {
    const raw = localStorage.getItem(TRUST_KEY);
    if (!raw) return;
    const obj = JSON.parse(raw);
    obj.ts = Date.now();
    localStorage.setItem(TRUST_KEY, JSON.stringify(obj));
  } catch(_) {}
}


function splitTags(s){
  return (s||'').split(',').map(x=>x.trim()).filter(Boolean);
}

// ---------- Demo ----------
function demoSettings(){
  return {
    sources:["Instagram","TikTok","VK","Google","–°–∞—Ä–∞—Ñ–∞–Ω"],
    styles:["–†–µ–∞–ª–∏–∑–º","–ß/–ë","–¶–≤–µ—Ç","–û–ª–¥—Å–∫—É–ª"],
    zones:["–†—É–∫–∞","–ù–æ–≥–∞","–°–ø–∏–Ω–∞"],
    supplies:["–ö—Ä–∞—Å–∫–∏","–ò–≥–ª—ã","–•–∏–º–∏—è","–£—Ö–æ–¥"],
    suppliesDict:{
      "–ò–≥–ª—ã": { "units": "—à—Ç", "kinds": ["RL","RS","RM","CM"], "sizes": [3,5,7,9,11,13] },
      "–ö—Ä–∞—Å–∫–∏": { "units": "–º–ª", "brands": ["Eternal","WorldFamous"], "sizes": [30,60,120] },
      "–•–∏–º–∏—è": { "units": "–º–ª" },
      "–£—Ö–æ–¥": { "units": "—à—Ç" }
    },
    defaultReminder:"–ß–µ—Ä–µ–∑ 14 –¥–Ω–µ–π ‚Äî –°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ",
    syncInterval:60,
    language:"ru",
    reminderTemplates:["–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ","–ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤","–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Ö–æ–¥—É"],
    reminderDelays:[14,30,180],
  };
}
function demoClients(){
  return [
    {id:'cl_ivan', displayName:'–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', phone:'+421...', link:'instagram.com/ivan', source:'Instagram',
     first:true, type:'–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ', styles:['—Ä–µ–∞–ª–∏–∑–º','—á/–±'], zones:['–ø—Ä–µ–¥–ø–ª–µ—á—å–µ'], status:'–°–µ–∞–Ω—Å', qual:'–¶–µ–ª–µ–≤–æ–π',
     deposit:50, amount:450, notes:'–ø–µ—Ä–µ–∫—Ä—ã—Ç—å –Ω–∞–¥–ø–∏—Å—å', updatedAt: new Date().toISOString()},
    {id:'cl_ana', displayName:'–ê–Ω–∞—Å—Ç–∞—Å–∏—è –°–º–∏—Ä–Ω–æ–≤–∞', phone:'+421...', link:'vk.com/ana', source:'VK',
     first:false, type:'–ù–æ–≤–∞—è', styles:['–º–∏–Ω–∏–º–∞–ª–∏–∑–º'], zones:['–∫–∏—Å—Ç—å'], status:'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', qual:'–¶–µ–ª–µ–≤–æ–π',
     deposit:0, amount:0, notes:'', updatedAt: new Date().toISOString()}
  ];
}
function demoReminders(){ return []; }


// === Marketing overview: statuses + deposits split ============================

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–≤–æ–¥–∞ –¥–ª—è –ö–ê–†–¢–û–ß–ö–ò #1
const MK_STATUS_LABELS = {
   total:       '–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
  cold:        '–•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã',
  lead:        '–õ–∏–¥—ã',
  consultation:'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
  prepay:      '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞/—ç—Å–∫–∏–∑',
  session:     '–°–µ–∞–Ω—Å—ã',
  canceled:    '–û—Ç–º–µ–Ω–∏–ª',
 dropped:     '–°–ª–∏–ª—Å—è'
};

// –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è —è–∑—ã–∫–∞/—Å—Ç—Ä–∞–Ω—ã –∏ –ø–æ–ª–∞
const LANG_LABELS = {
  ru: '–†—É—Å—Å–∫–∏–π',
  en: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
  sk: '–°–ª–æ–≤–∞—Ü–∫–∏–π',
  de: '–ù–µ–º–µ—Ü–∫–∏–π',
  at: '–ê–≤—Å—Ç—Ä–∏—è',
  '':  '‚Äî'
};
const GENDER_LABELS = {
  male:   '–ú—É–∂—á–∏–Ω—ã',
  female: '–ñ–µ–Ω—â–∏–Ω—ã',
  '':     '–ù–µ —É–∫–∞–∑–∞–Ω'
};

// --- SuperFilter State ---
const MK_FILTERS = {
  status: new Set(),   // –∑–Ω–∞—á–µ–Ω–∏—è normalizeStatus: cold/lead/consultation/prepay/session/canceled/dropped
  lang:   new Set(),   // ru/en/sk/de/at/...
  gender: new Set(),   // male/female/''
  qual:   new Set(),   // target/semi/nontarget (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–Ω—É—Ç—Ä–∏)
};
let MK_CLIENTS_CACHE = [];



function normalizeStatus(raw) {
  const s = (raw || '').toString().trim().toLowerCase();
  if (!s) return '';

  if (s === 'lead' || s.startsWith('–ª–∏–¥')) return 'lead';
  if (s.includes('—Ö–æ–ª–æ–¥')) return 'cold';

  if (s.includes('–∫–æ–Ω—Å')) return 'consultation'; // "–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å.", "–∫–æ–Ω—Å. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
  if (s.includes('–ø—Ä–µ–¥–æ–ø–ª–∞—Ç') || s.includes('—ç—Å–∫–∏–∑') || s.includes('—Å–∫–µ—Ç—á')) return 'prepay';

  if (s.includes('—Å–µ–∞–Ω—Å') || s.includes('session')) return 'session';

  if (s.includes('–æ—Ç–º–µ–Ω')) return 'canceled';

  if (s.includes('—Å–ª–∏–ª') || s.includes('–ø—Ä–æ–ø–∞–ª') || s.includes('no show') || s.includes('ghost')) return 'dropped';

  return '';
}

// –°–±–æ—Ä –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º (–º–∞—Å—Å–∏–≤/–ø–æ–ª–µ)
function extractDepositsFromClient(c) {
  let count = 0, sum = 0;
  if (Array.isArray(c?.deposits)) {
    count += c.deposits.length;
    for (const d of c.deposits) sum += Number(d?.amount) || 0;
  }
  if (c?.depositAmount) {
    count += 1;
    sum += Number(c.depositAmount) || 0;
  }
  if (c?.deposit?.amount) {
    count += 1;
    sum += Number(c.deposit.amount) || 0;
  }
  return { count, sum };
}

// --- "–ö–∞–∫ –≤ Excel": —Å—á–∏—Ç–∞–µ–º –î–û–°–¢–ò–ñ–ï–ù–ò–Ø —Å—Ç–∞—Ç—É—Å–æ–≤ (to == ...), –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—ã–ª –ª–∏–¥–æ–º ---
function mkBuildReachedConversion(clients, logsMap) {
  const TARGETS = ['consultation', 'prepay', 'session', 'canceled', 'dropped'];
  const counts = { consultation:0, prepay:0, session:0, canceled:0, dropped:0 };
  let denom = 0;

  const norm = (x) => normalizeStatus(x);

  for (const c of (clients || [])) {
    const logs = logsMap.get(c.id) || [];

    // –±—ã–ª –ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ª–∏–¥–æ–º (–ø–æ –ª–æ–≥–∞–º –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    const wasLead = logs.some(r => norm(r?.to) === 'lead' || norm(r?.from) === 'lead')
               || norm(c?.status) === 'lead';
    if (!wasLead) continue;

    denom++;

    // –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–∑–∏–Ω ‚Äî –∫–∞–∫ –≤ Excel
    for (const t of TARGETS) {
      const hit = logs.some(r => norm(r?.to) === t);
      if (hit) counts[t] += 1;
    }
  }

  const pct = (n) => denom > 0 ? Math.round((n / denom) * 100) : 0;

  return {
    denom,
    consultation: { n: counts.consultation, p: pct(counts.consultation) },
    prepay:       { n: counts.prepay,       p: pct(counts.prepay)       },
    session:      { n: counts.session,      p: pct(counts.session)      },
    canceled:     { n: counts.canceled,     p: pct(counts.canceled)     },
    dropped:      { n: counts.dropped,      p: pct(counts.dropped)      }
  };
}

function normalizeQual(qRaw='') {
  const q = String(qRaw).toLowerCase();
  if (q.includes('—Ü–µ–ª–µ–≤–æ–π') && !q.includes('—É—Å–ª–æ–≤–Ω–æ')) return 'target';
  if (q.includes('—É—Å–ª–æ–≤–Ω–æ')) return 'semi';
  if (q.includes('–Ω–µ —Ü–µ–ª') || q.includes('–Ω–µ—Ü–µ–ª')) return 'nontarget';
  return ''; // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
}


// –ì–ª–∞–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç
function mkBuildOverviewFromClients(clients) {
  const counts = { total: clients.length, cold: 0, lead: 0, consultation: 0, prepay: 0, session: 0, canceled: 0, dropped: 0 };

  let depCount = 0, depSum = 0;

  for (const c of clients) {
    const st = normalizeStatus(c?.status || c?.stage || c?.type);
    if (st && counts.hasOwnProperty(st)) counts[st]++;

    const d = extractDepositsFromClient(c);
    depCount += d.count;
    depSum   += d.sum;
  }
  return { counts, depCount, depSum };
}

// –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è/–ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–±–µ—Ä—ë–º –≤—Å–µ—Ö, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø)
function mkBuildDemographicsFromClients(clients) {
  const pool = Array.isArray(clients) ? clients : [];

  // –Ø–∑—ã–∫–∏/—Å—Ç—Ä–∞–Ω—ã
  const langCounts = {};
  for (const c of pool) {
    const key = (c?.lang || '').trim().toLowerCase();
    langCounts[key] = (langCounts[key] || 0) + 1;
  }

  // –ü–æ–ª
  const genderCounts = { male: 0, female: 0, '': 0 };
  for (const c of pool) {
    const g = (c?.gender || '').trim().toLowerCase();
    if (g === 'male') genderCounts.male++;
    else if (g === 'female') genderCounts.female++;
    else genderCounts['']++;
  }

  // –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  const qualCounts = { target: 0, semi: 0, nontarget: 0 };
  for (const c of pool) {
    const q = (c?.qual || '').toLowerCase();
    if (q.includes('—Ü–µ–ª–µ–≤–æ–π') && !q.includes('—É—Å–ª–æ–≤–Ω–æ')) qualCounts.target++;
    else if (q.includes('—É—Å–ª–æ–≤–Ω–æ')) qualCounts.semi++;
    else if (q.includes('–Ω–µ —Ü–µ–ª') || q.includes('–Ω–µ—Ü–µ–ª')) qualCounts.nontarget++;
  }

  return { langCounts, genderCounts, qualCounts };
}

function mkRenderCardDemographics({ langCounts = {}, genderCounts = {}, qualCounts = {} }) {
  // –Ø–∑—ã–∫/—Å—Ç—Ä–∞–Ω–∞
  const langEl = document.getElementById('mk-demo-lang');
  if (langEl) {
    const entries = Object.entries(langCounts)
      .sort((a,b) => b[1] - a[1]); // –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    langEl.innerHTML = entries.length
      ? entries.map(([code, n]) => {
          const label = LANG_LABELS.hasOwnProperty(code) ? LANG_LABELS[code] : (code || '‚Äî');
          return `<li class="mk-row"><span class="label">${label}</span><span class="value">${n}</span></li>`;
        }).join('')
      : `<li class="mk-row"><span class="label">‚Äî</span><span class="value">0</span></li>`;
  }

  // –ü–æ–ª
  const gEl = document.getElementById('mk-demo-gender');
  if (gEl) {
    const order = ['male','female',''];
    gEl.innerHTML = order.map(key => {
      const label = GENDER_LABELS[key] || key;
      const val = genderCounts[key] || 0;
      return `<li class="mk-row"><span class="label">${label}</span><span class="value">${val}</span></li>`;
    }).join('');
  }

  // –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
  const qEl = document.getElementById('mk-demo-qual');
  if (qEl) {
    const rows = [
      ['target',    '–¶–µ–ª–µ–≤–æ–π'],
      ['semi',      '–£—Å–ª–æ–≤–Ω–æ-—Ü–µ–ª–µ–≤–æ–π'],
      ['nontarget', '–ù–µ —Ü–µ–ª–µ–≤–æ–π']
    ];
    qEl.innerHTML = rows.map(([k, label]) => {
      const val = qualCounts[k] || 0;
      return `<li class="mk-row"><span class="label">${label}</span><span class="value">${val}</span></li>`;
    }).join('');
  }
}


// –†–µ–Ω–¥–µ—Ä –ö–ê–†–¢–û–ß–ö–ò #1 (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã)
function mkRenderCardStatuses(counts) {
  const list = document.getElementById('mk-status-list');
  if (!list) return;

  const order = ['total', 'cold', 'lead', 'consultation', 'prepay', 'session', 'canceled', 'dropped'];
  const html = order.map(key => {
    const label = MK_STATUS_LABELS[key] || key;
    const val = counts[key] ?? 0;

    if (key === 'total') {
      return `<li class="mk-row"><span class="label">${label}</span><span class="value">${val}</span></li>`;
    }

    // —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    const isChecked = MK_FILTERS.status.has(key) ? 'checked' : '';
    return `
      <li class="mk-row">
        <label class="mk-check">
          <span class="label">
            <input type="checkbox" class="mk-filter" data-mk-group="status" data-mk-value="${key}" ${isChecked}/>
            ${label}
          </span>
          <span class="value">${val}</span>
        </label>
      </li>`;
  }).join('');

  list.innerHTML = html;
}
// –†–µ–Ω–¥–µ—Ä –ö–ê–†–¢–û–ß–ö–ò #2 (—Ç–æ–ª—å–∫–æ –¥–µ–ø–æ–∑–∏—Ç—ã)
function mkRenderCardDemographics({ langCounts = {}, genderCounts = {}, qualCounts = {} }) {
  // –Ø–∑—ã–∫/—Å—Ç—Ä–∞–Ω–∞
  const langEl = document.getElementById('mk-demo-lang');
  if (langEl) {
    const entries = Object.entries(langCounts).sort((a,b) => b[1] - a[1]);
    langEl.innerHTML = entries.length
      ? entries.map(([code, n]) => {
          const label = LANG_LABELS.hasOwnProperty(code) ? LANG_LABELS[code] : (code || '‚Äî');
          const checked = MK_FILTERS.lang.has(code) ? 'checked' : '';
          return `<li class="mk-row">
            <label class="mk-check">
              <span class="label">
                <input type="checkbox" class="mk-filter" data-mk-group="lang" data-mk-value="${code}" ${checked}/>
                ${label}
              </span>
              <span class="value">${n}</span>
            </label>
          </li>`;
        }).join('')
      : `<li class="mk-row"><span class="label">‚Äî</span><span class="value">0</span></li>`;
  }

  // –ü–æ–ª
  const gEl = document.getElementById('mk-demo-gender');
  if (gEl) {
    const order = ['male','female',''];
    gEl.innerHTML = order.map(key => {
      const label = GENDER_LABELS[key] || key;
      const val = genderCounts[key] || 0;
      const checked = MK_FILTERS.gender.has(key) ? 'checked' : '';
      return `<li class="mk-row">
        <label class="mk-check">
          <span class="label">
            <input type="checkbox" class="mk-filter" data-mk-group="gender" data-mk-value="${key}" ${checked}/>
            ${label}
          </span>
          <span class="value">${val}</span>
        </label>
      </li>`;
    }).join('');
  }

  // –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
  const qEl = document.getElementById('mk-demo-qual');
  if (qEl) {
    const rows = [
      ['target',    '–¶–µ–ª–µ–≤–æ–π'],
      ['semi',      '–£—Å–ª–æ–≤–Ω–æ —Ü–µ–ª–µ–≤–æ–π'],
      ['nontarget', '–ù–µ —Ü–µ–ª–µ–≤–æ–π']
    ];
    qEl.innerHTML = rows.map(([k, label]) => {
      const val = qualCounts[k] || 0;
      const checked = MK_FILTERS.qual.has(k) ? 'checked' : '';
      return `<li class="mk-row">
        <label class="mk-check">
          <span class="label">
            <input type="checkbox" class="mk-filter" data-mk-group="qual" data-mk-value="${k}" ${checked}/>
            ${label}
          </span>
          <span class="value">${val}</span>
        </label>
      </li>`;
    }).join('');
  }
}


// –î–æ—Å—Ç–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
async function mkFetchClientsFallback() {
  if (window.AppState?.clients && Array.isArray(AppState.clients)) return AppState.clients;

  try {
    const db = firebase?.firestore?.();
    if (db) {
      const snap1 = await db.collection('TattooCRM').doc('app').collection('clients').get();
      if (!snap1.empty) return snap1.docs.map(d => ({ id: d.id, ...d.data() }));

      const snap2 = await db.collection('clients').get();
      if (!snap2.empty) return snap2.docs.map(d => ({ id: d.id, ...d.data() }));
    }
  } catch (_) { /* noop */ }

  return [];
}

// --- –õ–æ–≥–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (—á–µ—Ä–µ–∑ FB.db, —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π) ---
async function mkFetchStatusLogsForClients(clients) {
  const out = new Map(); // clientId -> [{ ts, from, to, _id }, ... asc]
  if (!Array.isArray(clients) || !clients.length) return out;

  for (const c of clients) {
    const id = c?.id;
    if (!id) continue;

    try {
      const snap = await FB.db
        .collection('TattooCRM').doc('app')
        .collection('clients').doc(id)
        .collection('statusLogs')
        .get();

      const arr = [];
      snap.forEach(d => {
        const row = d.data() || {};
        arr.push({
          ts: row.ts || '',
          from: row.from || '',
          to: row.to || '',
          _id: d.id || ''
        });
      });

      // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ts (–µ—Å–ª–∏ ISO), –∏–Ω–∞—á–µ –ø–æ doc.id (—É –Ω–∞—Å —ç—Ç–æ Date.now())
      arr.sort((a, b) => {
        const ak = a.ts ? a.ts : String(a._id || '');
        const bk = b.ts ? b.ts : String(b._id || '');
        return ak.localeCompare(bk);
      });

      out.set(id, arr);
    } catch (e) {
      console.warn('[mkFetchStatusLogsForClients]', id, e?.message || e);
      out.set(id, []);
    }
  }
  return out;
}

// --- –ö–æ–Ω–≤–µ—Ä—Å–∏—è "–∏–∑ –ª–∏–¥–æ–≤" –≤ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ –ª–æ–≥–∞–º (–ø–æ –∏–Ω–¥–µ–∫—Å—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ LEAD) ---
function mkBuildLeadConversionFromLogs(clients, logsMap) {
  const TARGETS = ['consultation', 'prepay', 'session', 'canceled', 'dropped'];

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏, –≥–¥–µ to == 'lead'. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî null –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å == lead, –∏–Ω–∞—á–µ -1.
  function findLeadIndex(sortedLogs, client) {
    const i = (sortedLogs || []).findIndex(row => normalizeStatus(row?.to) === 'lead');
    if (i >= 0) return i;
    const nowIsLead = normalizeStatus(client?.status || client?.stage || client?.type) === 'lead';
    return nowIsLead ? null : -1;
  }

  let denom = 0;
  const cnt = { consultation: 0, prepay: 0, session: 0, canceled: 0, dropped: 0 };

  for (const c of (clients || [])) {
    const logs = logsMap.get(c.id) || [];
    const iLead = findLeadIndex(logs, c);
    if (iLead === -1) continue;  // –Ω–µ –±—ã–ª –ª–∏–¥–æ–º –≤–æ–≤—Å–µ
    denom++;

    for (const t of TARGETS) {
      // –ï—Å–ª–∏ iLead === null (—Å–µ–π—á–∞—Å –≤ –ª–∏–¥–µ, –Ω–æ –ª–æ–≥–∞ LEAD –Ω–µ—Ç) ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—é–±–æ–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ t.
      // –ò–Ω–∞—á–µ ‚Äî –∏—â–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ t –°–¢–†–û–ì–û –ü–û–°–õ–ï –∏–Ω–¥–µ–∫—Å–∞ iLead.
      const hit = logs.some((row, idx) => {
        const toNorm = normalizeStatus(row?.to);
        if (toNorm !== t) return false;
        return (iLead === null) ? true : (idx > iLead);
      });
      if (hit) cnt[t] += 1;
    }
  }

  const pct = (n) => denom > 0 ? Math.round((n / denom) * 100) : 0;

  return {
    denom,
    consultation: { n: cnt.consultation, p: pct(cnt.consultation) },
    prepay:       { n: cnt.prepay,       p: pct(cnt.prepay)       },
    session:      { n: cnt.session,      p: pct(cnt.session)      },
    canceled:     { n: cnt.canceled,     p: pct(cnt.canceled)     },
    dropped:      { n: cnt.dropped,      p: pct(cnt.dropped)      }
  };
}


// --- –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ4) ---
function mkRenderCardConversion(conv) {
  // –ú–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
  const box = document.getElementById('mk-card-conv');
  if (!box || !conv) return;

  const set = (id, text) => {
    const el = document.getElementById(id);
    if (el) el.textContent = text;
  };

  set('mk-conv-den', String(conv.denom));
  set('mk-conv-consult', `${conv.consultation.n} (${conv.consultation.p}%)`);
  set('mk-conv-prepay',   `${conv.prepay.n} (${conv.prepay.p}%)`);
  set('mk-conv-session',  `${conv.session.n} (${conv.session.p}%)`);
  set('mk-conv-canceled', `${conv.canceled.n} (${conv.canceled.p}%)`);
  set('mk-conv-dropped',  `${conv.dropped.n} (${conv.dropped.p}%)`);
}


function mkClientMatchesFilters(c) {
  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª—é–±–æ–π
  const hasAny =
    MK_FILTERS.status.size || MK_FILTERS.lang.size ||
    MK_FILTERS.gender.size || MK_FILTERS.qual.size;

  if (!hasAny) return false;

  // –ì—Ä—É–ø–ø–∞: STATUS
  if (MK_FILTERS.status.size) {
    const st = normalizeStatus(c?.status || c?.stage || c?.type);
    if (!MK_FILTERS.status.has(st)) return false;
  }

  // –ì—Ä—É–ø–ø–∞: LANG
  if (MK_FILTERS.lang.size) {
    const lang = String(c?.lang || '').trim().toLowerCase();
    if (!MK_FILTERS.lang.has(lang)) return false;
  }

  // –ì—Ä—É–ø–ø–∞: GENDER
  if (MK_FILTERS.gender.size) {
    const g = String(c?.gender || '').trim().toLowerCase();
    const key = (g === 'male' || g === 'female') ? g : '';
    if (!MK_FILTERS.gender.has(key)) return false;
  }

  // –ì—Ä—É–ø–ø–∞: QUAL
  if (MK_FILTERS.qual.size) {
    const q = normalizeQual(c?.qual || '');
    if (!MK_FILTERS.qual.has(q)) return false;
  }

  return true;
}

function mkRenderResults(clients) {
  const list = document.getElementById('mk-filter-list');
  const cntEl = document.getElementById('mk-result-count');
  if (!list || !cntEl) return;

  const pool = clients.filter(mkClientMatchesFilters);
  cntEl.textContent = pool.length;

  // –í—ã–≤–æ–¥–∏–º –¥–æ 50 —Å—Ç—Ä–æ–∫ (—á—Ç–æ–±—ã –Ω–µ –≤–∑—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É)
  const rows = pool.slice(0, 50).map(c => {
    const name = c?.displayName || '(–±–µ–∑ –∏–º–µ–Ω–∏)';
    const st = normalizeStatus(c?.status || c?.stage || c?.type);
    return `<li>
      <span class="left mk-link" data-open-client="${c.id || ''}">${name}</span>
      <span class="right">${MK_STATUS_LABELS[st] || ''}</span>
    </li>`;
  });

  list.innerHTML = rows.join('') || `<li><span class="left">‚Äî</span><span class="right">0</span></li>`;
}

document.addEventListener('change', (e) => {
  const el = e.target;
  if (!(el instanceof HTMLInputElement)) return;
  if (!el.classList.contains('mk-filter')) return;

  const group = el.dataset.mkGroup;  // status | lang | gender | qual
  const value = el.dataset.mkValue;  // –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  if (!group) return;

  const set = MK_FILTERS[group];
  if (!set) return;

  if (el.checked) set.add(value);
  else set.delete(value);

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  mkRenderResults(MK_CLIENTS_CACHE);
});

document.addEventListener('click', (e) => {
  const a = e.target.closest('[data-open-client]');
  if (!a) return;
  const id = a.getAttribute('data-open-client');
  if (!id) return;
  // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è openClientDialog(id) ‚Äî –≤—ã–∑–æ–≤–∏ –µ—ë:
  if (typeof openClientById === 'function') openClientById(id);;
});

document.addEventListener('click', (e) => {
  const btn = e.target.closest('#mk-filter-reset');
  if (!btn) return;
  mkResetFilters();
});

function mkResetFilters() {
  // –æ—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  MK_FILTERS.status.clear();
  MK_FILTERS.lang.clear();
  MK_FILTERS.gender.clear();
  MK_FILTERS.qual.clear();

  // —Å–Ω—è—Ç—å –≥–∞–ª–æ—á–∫–∏ –≤ UI
  document.querySelectorAll('input.mk-filter[type="checkbox"]').forEach(cb => {
    cb.checked = false;
  });

  // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  mkRenderResults(MK_CLIENTS_CACHE);
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
document.addEventListener('DOMContentLoaded', async () => {
  try {
    MK_CLIENTS_CACHE = await mkFetchClientsFallback();

    // –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ1
    const { counts } = mkBuildOverviewFromClients(MK_CLIENTS_CACHE);
    mkRenderCardStatuses(counts);

    // –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ2
    const demo = mkBuildDemographicsFromClients(MK_CLIENTS_CACHE);
    mkRenderCardDemographics(demo);

    // –°—É–ø–µ—Ä—Ñ–∏–ª—å—Ç—Ä
    mkResetFilters();
    mkRenderResults(MK_CLIENTS_CACHE);

    // –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ4: ¬´–∫–∞–∫ –≤ Excel¬ª
    const logsMap = await mkFetchStatusLogsForClients(MK_CLIENTS_CACHE);
    const conv = mkBuildReachedConversion(MK_CLIENTS_CACHE, logsMap);
    mkRenderCardConversion(conv);
    console.log('[conv reached]', conv);
// --- –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ5: Totals + Potential ---
    const untilInput = document.getElementById('mkPotentialUntil');
    if (untilInput) {
      // –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1-–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      const now = new Date();
      const def = new Date(now.getFullYear(), now.getMonth() + 1, 1);
      const defYmd =
        `${def.getFullYear()}-${String(def.getMonth()+1).padStart(2,'0')}-${String(def.getDate()).padStart(2,'0')}`;
      if (!untilInput.value) untilInput.value = defYmd;

      // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏—Ç–æ–≥–æ–≤
      const totals1 = mkCalcTotalsAndPotential(MK_CLIENTS_CACHE, AppState.marketing, untilInput.value);
      mkRenderCardTotals(totals1);

      // –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
            untilInput.addEventListener('change', () => {
        const totals2 = mkCalcTotalsAndPotential(MK_CLIENTS_CACHE, AppState.marketing, untilInput.value);
        mkRenderCardTotals(totals2);
      });
    }

    // --- –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ6: –§–∏–Ω–∞–Ω—Å—ã ---
    mkUpdateFinanceCard();
    document.getElementById('mkIncludeSupplies')?.addEventListener('change', mkUpdateFinanceCard);

  } catch (e) {

    console.warn('[marketing overview] render failed:', e);
  }
});
// envelopes-app.js

// Firebase config
const firebaseConfig = {
  apiKey: "AIzaSyBzHEcrGfwek6FzguWbSGSfMgebMy1sBe8",
  authDomain: "minibudget-4e474.firebaseapp.com",
  projectId: "minibudget-4e474",
  storageBucket: "minibudget-4e474.appspot.com",
  messagingSenderId: "306275735842",
  appId: "1:306275735842:web:740615c23059e97cd36d7b"
};

firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

const form = document.getElementById("add-envelope-form");
const nameInput = document.getElementById("envelope-name");
const goalInput = document.getElementById("envelope-goal");
const commentInput = document.getElementById("envelope-comment");
const list = document.getElementById("envelope-list");

const incomeButton = document.getElementById("distribute-income");
if (incomeButton) {
  incomeButton.addEventListener("click", distributeIncome);
}

form.addEventListener("submit", async (e) => {
  e.preventDefault();
  const name = document.getElementById('envelope-name').value.trim();
  const hasGoal = document.getElementById('envelope-has-goal').checked;
  const goal = hasGoal ? Number(document.getElementById('envelope-goal').value) : 0;
  const comment = document.getElementById('envelope-comment').value.trim();
  const distribution = document.getElementById('envelope-distribution').checked;
  const percent = distribution ? Number(document.getElementById('envelope-percent').value) : 0;

  if (!name) return; // –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  if (hasGoal && (!goal || isNaN(goal))) return; // –µ—Å–ª–∏ —Ü–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ ‚Äî –Ω—É–∂–Ω–∞ —Å—É–º–º–∞

  try {
    await db.collection("envelopes").add({
      name,
      goal: hasGoal ? goal : 0,
      comment,
      current: 0,
      created: Date.now(),
      includeInDistribution: distribution,
      percent
    });
    form.reset();
    document.getElementById('goal-block').style.display = 'none';
    document.getElementById('percent-block').style.display = 'none';
    loadEnvelopes();
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞:", e.message);
  }
});

async function loadEnvelopes() {
  list.innerHTML = "<p style='color:#999'>–ó–∞–≥—Ä—É–∑–∫–∞...</p>";
  const snapshot = await db.collection("envelopes").orderBy("created", "asc").get();
  if (snapshot.empty) {
    list.innerHTML = "<p style='color:#bbb'>–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞</p>";
    return;
  }
  list.innerHTML = "";

  const envelopes = snapshot.docs;
const primary = envelopes.find(doc => doc.data().isPrimary);
const miniBudget = envelopes.find(doc => doc.data().isMiniBudget);
const others = envelopes.filter(doc => !doc.data().isPrimary && !doc.data().isMiniBudget);

// –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –û–±—â–∏–π ‚Üí MiniBudget ‚Üí –æ—Å—Ç–∞–ª—å–Ω—ã–µ
const ordered = [];
if (primary) ordered.push(primary);
if (miniBudget) ordered.push(miniBudget);
ordered.push(...others);


 function calculateRemainingPercent() {
  // –°—É–º–º–∏—Ä—É–µ–º percent –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤, –∫—Ä–æ–º–µ isPrimary
  return envelopes.reduce((acc, doc) => {
    if (!doc.data().isPrimary) {
      return acc + parseFloat(doc.data().percent || 0);
    }
    return acc;
  }, 0);
}
const remaining = 100 - calculateRemainingPercent();


  ordered.forEach(doc => {
    const data = doc.data();
    const percent = Math.min(100, Math.round(data.percent || 0));
    const isMiniBudget = data.isMiniBudget === true;
    const isPrimary = data.isPrimary === true;
    const block = document.createElement("div");

   block.className = "block envelope-block"; // üëà –¥–æ–±–∞–≤–ª—è–µ–º envelope-block
block.innerHTML = `
  <div class="expense-entry">
    <div class="expense-left">
<div class="top-line" style="display:flex; align-items:center; justify-content:space-between;">
  <span class="top-name">
    <strong>${data.name}</strong>
    ${isPrimary ? "<span style='color:#999'>(–æ–±—â–∏–π)</span>" : ""}
  </span>
  <div class="progress-ring" style="width:36px; height:36px;">
    <svg width="36" height="36">
      <!-- –§–æ–Ω ‚Äî –≤—Å–µ–≥–¥–∞ –∫—Ä—É–≥ (—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π) -->
      <circle cx="18" cy="18" r="16" stroke="#888" stroke-width="4" fill="none"/>
      <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –¥—É–≥–∞, –æ—Ä–∞–Ω–∂–µ–≤–∞—è -->
      <circle
        cx="18" cy="18" r="16"
        stroke="#f7931e"
        stroke-width="4"
        fill="none"
        stroke-linecap="round"
        stroke-dasharray="${2 * Math.PI * 16}"
        stroke-dashoffset="${2 * Math.PI * 16 * (1 - (isPrimary ? remaining/100 : Math.min(1, data.current / data.goal)))}"
        style="transition: stroke-dashoffset 0.4s;"/>
      <text x="18" y="22" text-anchor="middle" font-size="13" fill="#f7931e" font-weight="bold">
        ${isPrimary ? remaining : Math.round(Math.min(1, data.current / data.goal) * 100)}%
      </text>
    </svg>
  </div>
</div>
      <div class="bottom-line">
        <span>‚Ç¨${data.current.toFixed(2)} / ‚Ç¨${data.goal.toFixed(2)}</span>
        ${data.comment ? `<div class="info-line">${data.comment}</div>` : ""}
        ${data.includeInDistribution === false && !isPrimary ? `<div class="info-line" style="color:#aaa">–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏</div>` : ""}
      </div>
    </div>
    <div class="expense-right" style="display: flex; flex-direction: column; align-items: flex-end; gap: 8px;">
      <!-- –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é (3 –ø–æ–ª–æ—Å–∫–∏) -->
      ${!(isPrimary || isMiniBudget) ? `
      <button class="round-btn gray small menu-btn" data-id="${doc.id}">
        <span data-lucide="menu"></span>
      </button>
      ` : ""}
      <!-- 4 –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ –∫–Ω–æ–ø–∫–∏ -->
      <button class="round-btn green small" onclick="startEditEnvelope('${doc.id}')">
        <span data-lucide="pencil"></span>
      </button>
      <button class="round-btn blue small" onclick="addToEnvelope('${doc.id}')">
        <span data-lucide="plus"></span>
      </button>
      <button class="round-btn red small" onclick="subtractFromEnvelope('${doc.id}')">
        <span data-lucide="minus"></span>
      </button>
      <button class="round-btn orange small" onclick="transferEnvelope('${doc.id}', ${data.current})">
        <span data-lucide="move-horizontal"></span>
      </button>
    </div>
  </div>
`;

    list.appendChild(block);
  });
setTimeout(() => {
  document.querySelectorAll('.menu-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const id = btn.getAttribute('data-id');
      showEnvelopeMenu(btn, id);
    });
  });
}, 0);

  lucide.createIcons();
}

// –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å...

async function subtractFromEnvelope(id) {
  const amount = prompt("–°–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å (‚Ç¨)?");
  const value = parseFloat(amount);
  if (isNaN(value) || value <= 0) return;
  const ref = db.collection("envelopes").doc(id);
  await db.runTransaction(async (t) => {
    const doc = await t.get(ref);
    const data = doc.data();
    t.update(ref, { current: (data.current || 0) - value });
  });
  loadEnvelopes();
}

async function addToEnvelope(id) {
  const amount = prompt("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å (‚Ç¨)?");
  const value = parseFloat(amount);
  if (isNaN(value) || value <= 0) return;
  const ref = db.collection("envelopes").doc(id);
  await db.runTransaction(async (t) => {
    const doc = await t.get(ref);
    const data = doc.data();
    t.update(ref, { current: (data.current || 0) + value });
  });
  loadEnvelopes();
}

async function editEnvelope(id, oldName, oldGoal, oldComment, oldPercent, oldInclude) {
  const newName = prompt("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", oldName);
  const newGoal = prompt("–ù–æ–≤–∞—è —Ü–µ–ª—å (‚Ç¨):", oldGoal);
  const newComment = prompt("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", oldComment);
  const newPercent = prompt("–ü—Ä–æ—Ü–µ–Ω—Ç (%):", oldPercent);
  const includeInDistribution = confirm("–í–∫–ª—é—á–∏—Ç—å –≤ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ?");
  const name = newName?.trim();
  const goal = parseFloat(newGoal);
  const comment = newComment?.trim();
  const percent = parseFloat(newPercent);
  if (!name || isNaN(goal) || goal <= 0 || isNaN(percent)) return;
  await db.collection("envelopes").doc(id).update({ name, goal, comment, percent, includeInDistribution });
  loadEnvelopes();
}

async function deleteEnvelope(id) {
  const ref = db.collection("envelopes").doc(id);
  const snap = await ref.get();
 if (snap.exists && (snap.data().isPrimary || snap.data().isMiniBudget)) {
  alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç.");
  return;
}
  if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç?")) return;
  await ref.delete();
  loadEnvelopes();
}


async function transferEnvelope(fromId, maxAmount) {
  const amount = prompt("–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (‚Ç¨)?");
  const value = parseFloat(amount);
  if (isNaN(value) || value <= 0 || value > maxAmount) return;
  const toId = prompt("ID –∫–æ–Ω–≤–µ—Ä—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:");
  if (!toId || toId === fromId) return;
  const fromRef = db.collection("envelopes").doc(fromId);
  const toRef = db.collection("envelopes").doc(toId);
  await db.runTransaction(async (t) => {
    const fromDoc = await t.get(fromRef);
    const toDoc = await t.get(toRef);
    if (!fromDoc.exists || !toDoc.exists) throw new Error("–û–¥–∏–Ω –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    const fromData = fromDoc.data();
    const toData = toDoc.data();
    t.update(fromRef, { current: (fromData.current || 0) - value });
    t.update(toRef, { current: (toData.current || 0) + value });
  });
  loadEnvelopes();
}

async function distributeIncome() {
  const amount = prompt("–°–∫–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å (‚Ç¨)?");
  const total = parseFloat(amount);
  if (isNaN(total) || total <= 0) return;
  const snapshot = await db.collection("envelopes").where("includeInDistribution", "==", true).get();
  let totalPercent = 0;
  snapshot.forEach(doc => {
    const data = doc.data();
    totalPercent += parseFloat(data.percent || 0);
  });
  if (totalPercent === 0) {
    alert("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.");
    return;
  }
if (totalPercent < 100) {
  const leftover = total * ((100 - totalPercent) / 100);
  const fallback = await db.collection("envelopes")
    .where("isPrimary", "==", true)
    .limit(1)
    .get();
  
  if (!fallback.empty) {
    const fallbackDoc = fallback.docs[0];
    const fallbackId = fallbackDoc.id;
    const current = fallbackDoc.data().current || 0;

    await db.collection("envelopes").doc(fallbackId).update({
      current: current + leftover
    });
  } else {
    alert("–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ–∫—É–¥–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—å: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç –Ω–µ –∑–∞–¥–∞–Ω.");
  }
}

  await Promise.all(snapshot.docs.map(async (doc) => {
    const data = doc.data();
    const part = (parseFloat(data.percent || 0) / totalPercent) * total;
    await db.collection("envelopes").doc(doc.id).update({
      current: (data.current || 0) + part
    });
  }));
  loadEnvelopes();
}

// === –î–û–ë–ê–í–¨ –≤–º–µ—Å—Ç–æ ensurePrimaryEnvelopeExists ===
async function ensureSystemEnvelopes() {
  // 1. –°–æ–∑–¥–∞—ë–º "–û–±—â–∏–π", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const primary = await db.collection("envelopes").where("isPrimary", "==", true).limit(1).get();
  if (primary.empty) {
    await db.collection("envelopes").add({
      name: "–û–±—â–∏–π",
      goal: 1000000,
      comment: "–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç",
      current: 0,
      created: Date.now(),
      percent: 0,
      includeInDistribution: false,
      isPrimary: true
    });
    console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç '–û–±—â–∏–π' —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
  }

  // 2. –°–æ–∑–¥–∞—ë–º "MiniBudget", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const miniBudget = await db.collection("envelopes").where("isMiniBudget", "==", true).limit(1).get();
  if (miniBudget.empty) {
    await db.collection("envelopes").add({
      name: "MiniBudget",
      goal: 1000000,
      comment: "Mini Budget. –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
      current: 0,
      created: Date.now(),
      percent: 0,
      includeInDistribution: true,
      isMiniBudget: true
    });
    console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç 'MiniBudget' —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
  }
}
window.addEventListener("DOMContentLoaded", async () => {
  await ensureSystemEnvelopes();
  loadEnvelopes();
});

document.getElementById('envelope-has-goal').addEventListener('change', function() {
  document.getElementById('envelope-goal').style.display = this.checked ? 'inline-block' : 'none';
});
document.getElementById('envelope-distribution').addEventListener('change', function() {
  const range = document.getElementById('envelope-percent');
  const label = document.getElementById('envelope-percent-label');
  range.style.display = label.style.display = this.checked ? 'inline-block' : 'none';
  range.disabled = !this.checked;
});
document.getElementById('envelope-percent').addEventListener('input', function() {
  document.getElementById('envelope-percent-label').textContent = this.value + "%";
});

// envelopes-app.js (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è openDistributionEditor)

// envelopes-app.js (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è openDistributionEditor)

async function openDistributionEditor() {
  const snapshot = await db.collection("envelopes").orderBy("created", "asc").get();
  if (snapshot.empty) {
    alert("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
    return;
  }

  const modal = document.createElement("div");
  modal.style.position = "fixed";
  modal.style.top = "50%";
  modal.style.left = "50%";
  modal.style.transform = "translate(-50%, -50%)";
  modal.style.background = "#f0f0f0";
  modal.style.padding = "24px";
  modal.style.borderRadius = "12px";
  modal.style.boxShadow = "0 8px 24px rgba(0,0,0,0.2)";
  modal.style.zIndex = "9999";
  modal.style.width = "320px";

  const container = document.createElement("div");
  container.innerHTML = `<h3 style='margin-bottom: 12px'>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤</h3>`;

  const ranges = [];

  const totalSumDisplay = document.createElement("div");
  totalSumDisplay.style.margin = "8px 0";
  container.appendChild(totalSumDisplay);

  snapshot.forEach(doc => {
    const data = doc.data();
   if (data.isPrimary) return;

// –∞ –¥–ª—è MiniBudget –Ω–∏—á–µ–≥–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º!

    const row = document.createElement("div");
    row.style.marginBottom = "16px";
    const percentValue = data.percent || 0;
  row.innerHTML = `
  <div style="display:flex; align-items:center; gap:8px; font-weight:bold; margin-bottom:4px;">
    <input type="checkbox" id="cb-${doc.id}" ${data.includeInDistribution !== false ? "checked" : ""} style="accent-color:#186663; width:18px; height:18px; margin:0;">
    <span id='label-${doc.id}' style='min-width:36px; text-align:right;'>${percentValue}%</span>
    <span>${data.name}</span>
  </div>
  <input type='range' min='0' max='100' step='1' value='${percentValue}' id='range-${doc.id}' style='width:100%'>
`;


    container.appendChild(row);
    ranges.push({ id: doc.id });
  });

// –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ row/range/checkbox —Å–æ–∑–¥–∞–Ω—ã:
ranges.forEach(r => {
  const range = document.getElementById(`range-${r.id}`);
  const cb = document.getElementById(`cb-${r.id}`);
  const label = document.getElementById(`label-${r.id}`);
  if (range && cb && label) {
    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    range.disabled = !cb.checked;
    if (!cb.checked) {
      range.value = 0;
      label.textContent = "0%";
    }
    // —Å–ª—É—à–∞—Ç–µ–ª—å —á–µ–∫–±–æ–∫—Å–∞
    cb.addEventListener("change", () => {
      if (cb.checked) {
        range.disabled = false;
        // –ù–ï –º–µ–Ω—è–µ–º range.value ‚Äî –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∫—Ä—É—Ç–∏—Ç!
      } else {
        range.value = 0;
        range.disabled = true;
        label.textContent = "0%";
      }
      updateTotalDisplay();
    });
    // —Å–ª—É—à–∞—Ç–µ–ª—å –±–µ–≥—É–Ω–∫–∞ –¥–ª—è –ª–µ–π–±–ª–∞
    range.addEventListener("input", () => {
      label.textContent = `${range.value}%`;
      updateTotalDisplay();
    });
  }
});

setTimeout(() => {
  document.querySelectorAll('.menu-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const id = btn.getAttribute('data-id');
      showEnvelopeMenu(btn, id);
    });
  });
}, 0);

  function calculateTotalPercent() {
    return ranges.reduce((acc, r) => acc + parseFloat(document.getElementById(`range-${r.id}`).value || 0), 0);
  }

  function updateTotalDisplay() {
    const total = calculateTotalPercent();
    const remaining = 100 - total;
    totalSumDisplay.innerHTML = `üßÆ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: <strong>${total}%</strong>, —Å–≤–æ–±–æ–¥–Ω–æ: <strong>${remaining}%</strong>`;

    if (total > 100) {
      totalSumDisplay.style.color = "#cc0000";
      saveBtn.disabled = true;
    } else if (total < 100) {
      totalSumDisplay.style.color = "#ff9900";
      saveBtn.disabled = false;
    } else {
      totalSumDisplay.style.color = "#186663";
      saveBtn.disabled = false;
    }
  }

  const buttonRow = document.createElement("div");
  buttonRow.className = "row end";
  buttonRow.style.marginTop = "16px";
  buttonRow.style.display = "flex";
  buttonRow.style.justifyContent = "center";
  buttonRow.style.gap = "32px";

  const cancelBtn = document.createElement("button");
  cancelBtn.className = "round-btn orange";
  cancelBtn.innerHTML = '<span data-lucide="x"></span>';
  cancelBtn.onclick = () => {
    document.body.removeChild(modal);
  };

  const saveBtn = document.createElement("button");
  saveBtn.className = "round-btn green";
  saveBtn.innerHTML = '<span data-lucide="check"></span>';
  saveBtn.onclick = async () => {
  await Promise.all(ranges.map(async (r) => {
    const cb = document.getElementById(`cb-${r.id}`);
    const range = document.getElementById(`range-${r.id}`);
    const percent = cb.checked ? parseFloat(range.value) : 0;
    await db.collection("envelopes").doc(r.id).update({
      percent,
      includeInDistribution: cb.checked
    });
  }));
  alert("–ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
  document.body.removeChild(modal);
  loadEnvelopes();
};



  buttonRow.appendChild(cancelBtn);
  buttonRow.appendChild(saveBtn);
  container.appendChild(buttonRow);

  modal.appendChild(container);
  document.body.appendChild(modal);

  // —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–∑—É–Ω–∫–æ–≤
  snapshot.forEach(doc => {
    if (doc.data().includeInDistribution === false || doc.data().isPrimary) return;
    const id = doc.id;
    const range = document.getElementById(`range-${id}`);
    const label = document.getElementById(`label-${id}`);
    if (range && label) {
      range.addEventListener("input", () => {
        label.textContent = `${range.value}%`;
        updateTotalDisplay();
      });
    }
  });

  updateTotalDisplay();
  lucide.createIcons();
}

function showEnvelopeMenu(btn, id) {
  // –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
  const oldMenu = document.getElementById('envelope-menu-popup');
  if (oldMenu) oldMenu.remove();

  const menu = document.createElement('div');
  menu.id = 'envelope-menu-popup';
  menu.style.position = 'absolute';
  const rect = btn.getBoundingClientRect();
  menu.style.top = `${rect.bottom + window.scrollY + 6}px`;
  menu.style.left = `${rect.left + window.scrollX - 8}px`;
  menu.style.background = '#fff';
  menu.style.boxShadow = '0 2px 12px rgba(0,0,0,0.15)';
  menu.style.borderRadius = '10px';
  menu.style.padding = '8px 0';
  menu.style.zIndex = 9999;
  menu.style.minWidth = '120px';
     menu.innerHTML = `
  <button class="menu-item" style="
    display:flex;
    align-items:center;
    gap:8px;
    padding:8px 16px;
    width:100%;
    background:none;
    border:none;
    cursor:pointer;
    color:#186663;
    font-size:16px;
    font-weight:500;
    transition:background 0.15s;
  " onmouseover="this.style.background='#f0f7f6'" onmouseout="this.style.background='none'">
    <span data-lucide="pencil"></span> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
  </button>
  <button class="menu-item" style="
    display:flex;
    align-items:center;
    gap:8px;
    padding:8px 16px;
    width:100%;
    background:none;
    border:none;
    cursor:pointer;
    color:#ff4d4f;
    font-size:16px;
    font-weight:500;
    transition:background 0.15s;
  " onmouseover="this.style.background='#fff5f5'" onmouseout="this.style.background='none'">
    <span data-lucide="trash-2"></span> –£–¥–∞–ª–∏—Ç—å
  </button>
`;

  document.body.appendChild(menu);
  lucide.createIcons();

  // –ö–ª–∏–∫ –≤–Ω–µ –º–µ–Ω—é ‚Äî –∑–∞–∫—Ä—ã—Ç—å
  setTimeout(() => {
    document.addEventListener('mousedown', function handler(ev) {
      if (!menu.contains(ev.target) && ev.target !== btn) {
        menu.remove();
        document.removeEventListener('mousedown', handler);
      }
    });
  }, 50);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  menu.children[0].onclick = () => { menu.remove(); startEditEnvelope(id); };
  menu.children[1].onclick = () => { menu.remove(); deleteEnvelope(id); };
}

function startEditEnvelope(id) {
  db.collection("envelopes").doc(id).get().then(doc => {
    if (doc.exists) {
      const d = doc.data();
      editEnvelope(id, d.name, d.goal, d.comment || '', d.percent || 0, d.includeInDistribution !== false);
    }
  });
}
// –¶–µ–ª—å: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–±–æ–∫—Å–∞
document.getElementById('envelope-has-goal').addEventListener('change', function() {
  document.getElementById('envelope-goal').style.display = this.checked ? 'inline-block' : 'none';
});

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–≥—É–Ω–æ–∫ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–±–æ–∫—Å–∞
document.getElementById('envelope-distribution').addEventListener('change', function() {
  const range = document.getElementById('envelope-percent');
  const label = document.getElementById('envelope-percent-label');
  range.style.display = label.style.display = this.checked ? 'inline-block' : 'none';
  range.disabled = !this.checked;
});

// –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –±–µ–≥—É–Ω–∫–∞
document.getElementById('envelope-percent').addEventListener('input', function() {
  document.getElementById('envelope-percent-label').textContent = this.value + "%";
});



addForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const name = document.getElementById('envelope-name').value.trim();
  const hasGoal = document.getElementById('envelope-has-goal').checked;
  const goal = hasGoal ? Number(document.getElementById('envelope-goal').value) : 0;
  const comment = document.getElementById('envelope-comment').value.trim();
  const distribution = document.getElementById('envelope-distribution').checked;
  const percent = distribution ? Number(document.getElementById('envelope-percent').value) : 0;

  if (!name) return; // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è

  try {
    await db.collection("envelopes").add({
      name,
      goal: hasGoal ? goal : 0,
      comment,
      current: 0,
      created: Date.now(),
      includeInDistribution: distribution,
      percent
    });
    addForm.reset();
    document.getElementById('envelope-goal').style.display = 'none';
    document.getElementById('envelope-percent').style.display = 'none';
    document.getElementById('envelope-percent-label').style.display = 'none';
    loadEnvelopes();
  } catch (err) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: " + err.message);
  }
});

